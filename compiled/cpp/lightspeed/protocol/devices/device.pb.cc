// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/devices/device.proto

#include "protocol/devices/device.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace lightspeed {
namespace devices {
PROTOBUF_CONSTEXPR ProtoSerialDevice::ProtoSerialDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.baud_)*/0
  , /*decltype(_impl_.family_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtoSerialDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoSerialDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoSerialDeviceDefaultTypeInternal() {}
  union {
    ProtoSerialDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoSerialDeviceDefaultTypeInternal _ProtoSerialDevice_default_instance_;
PROTOBUF_CONSTEXPR ProtoDevice::ProtoDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.family_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtoDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoDeviceDefaultTypeInternal() {}
  union {
    ProtoDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoDeviceDefaultTypeInternal _ProtoDevice_default_instance_;
}  // namespace devices
}  // namespace lightspeed
static ::_pb::Metadata file_level_metadata_protocol_2fdevices_2fdevice_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protocol_2fdevices_2fdevice_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protocol_2fdevices_2fdevice_2eproto = nullptr;

const uint32_t TableStruct_protocol_2fdevices_2fdevice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoSerialDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoSerialDevice, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoSerialDevice, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoSerialDevice, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoSerialDevice, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoSerialDevice, _impl_.baud_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoSerialDevice, _impl_.family_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoDevice, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoDevice, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoDevice, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::devices::ProtoDevice, _impl_.family_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::lightspeed::devices::ProtoSerialDevice)},
  { 12, -1, -1, sizeof(::lightspeed::devices::ProtoDevice)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::lightspeed::devices::_ProtoSerialDevice_default_instance_._instance,
  &::lightspeed::devices::_ProtoDevice_default_instance_._instance,
};

const char descriptor_table_protodef_protocol_2fdevices_2fdevice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035protocol/devices/device.proto\022\022lightsp"
  "eed.devices\032\037protocol/properties/props.p"
  "roto\"\206\002\n\021ProtoSerialDevice\022\n\n\002id\030\001 \001(\t\022\014"
  "\n\004name\030\002 \001(\t\022.\n\nproperties\030\003 \003(\0132\032.light"
  "speed.props.Property\022\017\n\007address\030\004 \001(\t\022\014\n"
  "\004baud\030\005 \001(\005\022<\n\006family\030\006 \001(\0162,.lightspeed"
  ".devices.ProtoSerialDevice.Family\"J\n\006Fam"
  "ily\022\007\n\003CCD\020\000\022\t\n\005MOUNT\020\001\022\013\n\007FOCUSER\020\002\022\020\n\014"
  "FILTER_WHEEL\020\003\022\r\n\tPOWER_BOX\020\004\"\333\001\n\013ProtoD"
  "evice\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022.\n\nprope"
  "rties\030\003 \003(\0132\032.lightspeed.props.Property\022"
  "6\n\006family\030\006 \001(\0162&.lightspeed.devices.Pro"
  "toDevice.Family\"J\n\006Family\022\007\n\003CCD\020\000\022\t\n\005MO"
  "UNT\020\001\022\013\n\007FOCUSER\020\002\022\020\n\014FILTER_WHEEL\020\003\022\r\n\t"
  "POWER_BOX\020\004P\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protocol_2fdevices_2fdevice_2eproto_deps[1] = {
  &::descriptor_table_protocol_2fproperties_2fprops_2eproto,
};
static ::_pbi::once_flag descriptor_table_protocol_2fdevices_2fdevice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protocol_2fdevices_2fdevice_2eproto = {
    false, false, 581, descriptor_table_protodef_protocol_2fdevices_2fdevice_2eproto,
    "protocol/devices/device.proto",
    &descriptor_table_protocol_2fdevices_2fdevice_2eproto_once, descriptor_table_protocol_2fdevices_2fdevice_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_protocol_2fdevices_2fdevice_2eproto::offsets,
    file_level_metadata_protocol_2fdevices_2fdevice_2eproto, file_level_enum_descriptors_protocol_2fdevices_2fdevice_2eproto,
    file_level_service_descriptors_protocol_2fdevices_2fdevice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protocol_2fdevices_2fdevice_2eproto_getter() {
  return &descriptor_table_protocol_2fdevices_2fdevice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protocol_2fdevices_2fdevice_2eproto(&descriptor_table_protocol_2fdevices_2fdevice_2eproto);
namespace lightspeed {
namespace devices {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoSerialDevice_Family_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fdevices_2fdevice_2eproto);
  return file_level_enum_descriptors_protocol_2fdevices_2fdevice_2eproto[0];
}
bool ProtoSerialDevice_Family_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProtoSerialDevice_Family ProtoSerialDevice::CCD;
constexpr ProtoSerialDevice_Family ProtoSerialDevice::MOUNT;
constexpr ProtoSerialDevice_Family ProtoSerialDevice::FOCUSER;
constexpr ProtoSerialDevice_Family ProtoSerialDevice::FILTER_WHEEL;
constexpr ProtoSerialDevice_Family ProtoSerialDevice::POWER_BOX;
constexpr ProtoSerialDevice_Family ProtoSerialDevice::Family_MIN;
constexpr ProtoSerialDevice_Family ProtoSerialDevice::Family_MAX;
constexpr int ProtoSerialDevice::Family_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoDevice_Family_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fdevices_2fdevice_2eproto);
  return file_level_enum_descriptors_protocol_2fdevices_2fdevice_2eproto[1];
}
bool ProtoDevice_Family_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProtoDevice_Family ProtoDevice::CCD;
constexpr ProtoDevice_Family ProtoDevice::MOUNT;
constexpr ProtoDevice_Family ProtoDevice::FOCUSER;
constexpr ProtoDevice_Family ProtoDevice::FILTER_WHEEL;
constexpr ProtoDevice_Family ProtoDevice::POWER_BOX;
constexpr ProtoDevice_Family ProtoDevice::Family_MIN;
constexpr ProtoDevice_Family ProtoDevice::Family_MAX;
constexpr int ProtoDevice::Family_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ProtoSerialDevice::_Internal {
 public:
};

void ProtoSerialDevice::clear_properties() {
  _impl_.properties_.Clear();
}
ProtoSerialDevice::ProtoSerialDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.devices.ProtoSerialDevice)
}
ProtoSerialDevice::ProtoSerialDevice(const ProtoSerialDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoSerialDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){from._impl_.properties_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.baud_){}
    , decltype(_impl_.family_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.baud_, &from._impl_.baud_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.family_) -
    reinterpret_cast<char*>(&_impl_.baud_)) + sizeof(_impl_.family_));
  // @@protoc_insertion_point(copy_constructor:lightspeed.devices.ProtoSerialDevice)
}

inline void ProtoSerialDevice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.baud_){0}
    , decltype(_impl_.family_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoSerialDevice::~ProtoSerialDevice() {
  // @@protoc_insertion_point(destructor:lightspeed.devices.ProtoSerialDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoSerialDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.address_.Destroy();
}

void ProtoSerialDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoSerialDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.devices.ProtoSerialDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  ::memset(&_impl_.baud_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.family_) -
      reinterpret_cast<char*>(&_impl_.baud_)) + sizeof(_impl_.family_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoSerialDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.devices.ProtoSerialDevice.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.devices.ProtoSerialDevice.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .lightspeed.props.Property properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.devices.ProtoSerialDevice.address"));
        } else
          goto handle_unusual;
        continue;
      // int32 baud = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.baud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .lightspeed.devices.ProtoSerialDevice.Family family = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_family(static_cast<::lightspeed::devices::ProtoSerialDevice_Family>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoSerialDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.devices.ProtoSerialDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.devices.ProtoSerialDevice.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.devices.ProtoSerialDevice.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .lightspeed.props.Property properties = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string address = 4;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.devices.ProtoSerialDevice.address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address(), target);
  }

  // int32 baud = 5;
  if (this->_internal_baud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_baud(), target);
  }

  // .lightspeed.devices.ProtoSerialDevice.Family family = 6;
  if (this->_internal_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_family(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.devices.ProtoSerialDevice)
  return target;
}

size_t ProtoSerialDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.devices.ProtoSerialDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lightspeed.props.Property properties = 3;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_impl_.properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string address = 4;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int32 baud = 5;
  if (this->_internal_baud() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_baud());
  }

  // .lightspeed.devices.ProtoSerialDevice.Family family = 6;
  if (this->_internal_family() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_family());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoSerialDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoSerialDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoSerialDevice::GetClassData() const { return &_class_data_; }


void ProtoSerialDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoSerialDevice*>(&to_msg);
  auto& from = static_cast<const ProtoSerialDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.devices.ProtoSerialDevice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_baud() != 0) {
    _this->_internal_set_baud(from._internal_baud());
  }
  if (from._internal_family() != 0) {
    _this->_internal_set_family(from._internal_family());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoSerialDevice::CopyFrom(const ProtoSerialDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.devices.ProtoSerialDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSerialDevice::IsInitialized() const {
  return true;
}

void ProtoSerialDevice::InternalSwap(ProtoSerialDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoSerialDevice, _impl_.family_)
      + sizeof(ProtoSerialDevice::_impl_.family_)
      - PROTOBUF_FIELD_OFFSET(ProtoSerialDevice, _impl_.baud_)>(
          reinterpret_cast<char*>(&_impl_.baud_),
          reinterpret_cast<char*>(&other->_impl_.baud_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoSerialDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2fdevices_2fdevice_2eproto_getter, &descriptor_table_protocol_2fdevices_2fdevice_2eproto_once,
      file_level_metadata_protocol_2fdevices_2fdevice_2eproto[0]);
}

// ===================================================================

class ProtoDevice::_Internal {
 public:
};

void ProtoDevice::clear_properties() {
  _impl_.properties_.Clear();
}
ProtoDevice::ProtoDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.devices.ProtoDevice)
}
ProtoDevice::ProtoDevice(const ProtoDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){from._impl_.properties_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.family_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.family_ = from._impl_.family_;
  // @@protoc_insertion_point(copy_constructor:lightspeed.devices.ProtoDevice)
}

inline void ProtoDevice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.family_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoDevice::~ProtoDevice() {
  // @@protoc_insertion_point(destructor:lightspeed.devices.ProtoDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void ProtoDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.devices.ProtoDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.family_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.devices.ProtoDevice.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.devices.ProtoDevice.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .lightspeed.props.Property properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .lightspeed.devices.ProtoDevice.Family family = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_family(static_cast<::lightspeed::devices::ProtoDevice_Family>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.devices.ProtoDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.devices.ProtoDevice.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.devices.ProtoDevice.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .lightspeed.props.Property properties = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .lightspeed.devices.ProtoDevice.Family family = 6;
  if (this->_internal_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_family(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.devices.ProtoDevice)
  return target;
}

size_t ProtoDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.devices.ProtoDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lightspeed.props.Property properties = 3;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_impl_.properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .lightspeed.devices.ProtoDevice.Family family = 6;
  if (this->_internal_family() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_family());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoDevice::GetClassData() const { return &_class_data_; }


void ProtoDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoDevice*>(&to_msg);
  auto& from = static_cast<const ProtoDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.devices.ProtoDevice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_family() != 0) {
    _this->_internal_set_family(from._internal_family());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoDevice::CopyFrom(const ProtoDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.devices.ProtoDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDevice::IsInitialized() const {
  return true;
}

void ProtoDevice::InternalSwap(ProtoDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.family_, other->_impl_.family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2fdevices_2fdevice_2eproto_getter, &descriptor_table_protocol_2fdevices_2fdevice_2eproto_once,
      file_level_metadata_protocol_2fdevices_2fdevice_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace devices
}  // namespace lightspeed
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lightspeed::devices::ProtoSerialDevice*
Arena::CreateMaybeMessage< ::lightspeed::devices::ProtoSerialDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::devices::ProtoSerialDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::devices::ProtoDevice*
Arena::CreateMaybeMessage< ::lightspeed::devices::ProtoDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::devices::ProtoDevice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

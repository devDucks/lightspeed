// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/devices/device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2fdevices_2fdevice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2fdevices_2fdevice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protocol/properties/props.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2fdevices_2fdevice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fdevices_2fdevice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fdevices_2fdevice_2eproto;
namespace lightspeed {
namespace devices {
class ProtoDevice;
struct ProtoDeviceDefaultTypeInternal;
extern ProtoDeviceDefaultTypeInternal _ProtoDevice_default_instance_;
class ProtoSerialDevice;
struct ProtoSerialDeviceDefaultTypeInternal;
extern ProtoSerialDeviceDefaultTypeInternal _ProtoSerialDevice_default_instance_;
}  // namespace devices
}  // namespace lightspeed
PROTOBUF_NAMESPACE_OPEN
template<> ::lightspeed::devices::ProtoDevice* Arena::CreateMaybeMessage<::lightspeed::devices::ProtoDevice>(Arena*);
template<> ::lightspeed::devices::ProtoSerialDevice* Arena::CreateMaybeMessage<::lightspeed::devices::ProtoSerialDevice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lightspeed {
namespace devices {

enum ProtoSerialDevice_Family : int {
  ProtoSerialDevice_Family_CCD = 0,
  ProtoSerialDevice_Family_MOUNT = 1,
  ProtoSerialDevice_Family_FOCUSER = 2,
  ProtoSerialDevice_Family_FILTER_WHEEL = 3,
  ProtoSerialDevice_Family_POWER_BOX = 4,
  ProtoSerialDevice_Family_ProtoSerialDevice_Family_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProtoSerialDevice_Family_ProtoSerialDevice_Family_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProtoSerialDevice_Family_IsValid(int value);
constexpr ProtoSerialDevice_Family ProtoSerialDevice_Family_Family_MIN = ProtoSerialDevice_Family_CCD;
constexpr ProtoSerialDevice_Family ProtoSerialDevice_Family_Family_MAX = ProtoSerialDevice_Family_POWER_BOX;
constexpr int ProtoSerialDevice_Family_Family_ARRAYSIZE = ProtoSerialDevice_Family_Family_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoSerialDevice_Family_descriptor();
template<typename T>
inline const std::string& ProtoSerialDevice_Family_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtoSerialDevice_Family>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtoSerialDevice_Family_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtoSerialDevice_Family_descriptor(), enum_t_value);
}
inline bool ProtoSerialDevice_Family_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtoSerialDevice_Family* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtoSerialDevice_Family>(
    ProtoSerialDevice_Family_descriptor(), name, value);
}
enum ProtoDevice_Family : int {
  ProtoDevice_Family_CCD = 0,
  ProtoDevice_Family_MOUNT = 1,
  ProtoDevice_Family_FOCUSER = 2,
  ProtoDevice_Family_FILTER_WHEEL = 3,
  ProtoDevice_Family_POWER_BOX = 4,
  ProtoDevice_Family_ProtoDevice_Family_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProtoDevice_Family_ProtoDevice_Family_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProtoDevice_Family_IsValid(int value);
constexpr ProtoDevice_Family ProtoDevice_Family_Family_MIN = ProtoDevice_Family_CCD;
constexpr ProtoDevice_Family ProtoDevice_Family_Family_MAX = ProtoDevice_Family_POWER_BOX;
constexpr int ProtoDevice_Family_Family_ARRAYSIZE = ProtoDevice_Family_Family_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoDevice_Family_descriptor();
template<typename T>
inline const std::string& ProtoDevice_Family_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtoDevice_Family>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtoDevice_Family_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtoDevice_Family_descriptor(), enum_t_value);
}
inline bool ProtoDevice_Family_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtoDevice_Family* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtoDevice_Family>(
    ProtoDevice_Family_descriptor(), name, value);
}
// ===================================================================

class ProtoSerialDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.devices.ProtoSerialDevice) */ {
 public:
  inline ProtoSerialDevice() : ProtoSerialDevice(nullptr) {}
  ~ProtoSerialDevice() override;
  explicit PROTOBUF_CONSTEXPR ProtoSerialDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoSerialDevice(const ProtoSerialDevice& from);
  ProtoSerialDevice(ProtoSerialDevice&& from) noexcept
    : ProtoSerialDevice() {
    *this = ::std::move(from);
  }

  inline ProtoSerialDevice& operator=(const ProtoSerialDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoSerialDevice& operator=(ProtoSerialDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoSerialDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoSerialDevice* internal_default_instance() {
    return reinterpret_cast<const ProtoSerialDevice*>(
               &_ProtoSerialDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoSerialDevice& a, ProtoSerialDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoSerialDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoSerialDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoSerialDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoSerialDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoSerialDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtoSerialDevice& from) {
    ProtoSerialDevice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoSerialDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.devices.ProtoSerialDevice";
  }
  protected:
  explicit ProtoSerialDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProtoSerialDevice_Family Family;
  static constexpr Family CCD =
    ProtoSerialDevice_Family_CCD;
  static constexpr Family MOUNT =
    ProtoSerialDevice_Family_MOUNT;
  static constexpr Family FOCUSER =
    ProtoSerialDevice_Family_FOCUSER;
  static constexpr Family FILTER_WHEEL =
    ProtoSerialDevice_Family_FILTER_WHEEL;
  static constexpr Family POWER_BOX =
    ProtoSerialDevice_Family_POWER_BOX;
  static inline bool Family_IsValid(int value) {
    return ProtoSerialDevice_Family_IsValid(value);
  }
  static constexpr Family Family_MIN =
    ProtoSerialDevice_Family_Family_MIN;
  static constexpr Family Family_MAX =
    ProtoSerialDevice_Family_Family_MAX;
  static constexpr int Family_ARRAYSIZE =
    ProtoSerialDevice_Family_Family_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Family_descriptor() {
    return ProtoSerialDevice_Family_descriptor();
  }
  template<typename T>
  static inline const std::string& Family_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Family>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Family_Name.");
    return ProtoSerialDevice_Family_Name(enum_t_value);
  }
  static inline bool Family_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Family* value) {
    return ProtoSerialDevice_Family_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kAddressFieldNumber = 4,
    kBaudFieldNumber = 5,
    kFamilyFieldNumber = 6,
  };
  // repeated .lightspeed.props.Property properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::lightspeed::props::Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >*
      mutable_properties();
  private:
  const ::lightspeed::props::Property& _internal_properties(int index) const;
  ::lightspeed::props::Property* _internal_add_properties();
  public:
  const ::lightspeed::props::Property& properties(int index) const;
  ::lightspeed::props::Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >&
      properties() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int32 baud = 5;
  void clear_baud();
  int32_t baud() const;
  void set_baud(int32_t value);
  private:
  int32_t _internal_baud() const;
  void _internal_set_baud(int32_t value);
  public:

  // .lightspeed.devices.ProtoSerialDevice.Family family = 6;
  void clear_family();
  ::lightspeed::devices::ProtoSerialDevice_Family family() const;
  void set_family(::lightspeed::devices::ProtoSerialDevice_Family value);
  private:
  ::lightspeed::devices::ProtoSerialDevice_Family _internal_family() const;
  void _internal_set_family(::lightspeed::devices::ProtoSerialDevice_Family value);
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.devices.ProtoSerialDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property > properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    int32_t baud_;
    int family_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fdevices_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ProtoDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.devices.ProtoDevice) */ {
 public:
  inline ProtoDevice() : ProtoDevice(nullptr) {}
  ~ProtoDevice() override;
  explicit PROTOBUF_CONSTEXPR ProtoDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoDevice(const ProtoDevice& from);
  ProtoDevice(ProtoDevice&& from) noexcept
    : ProtoDevice() {
    *this = ::std::move(from);
  }

  inline ProtoDevice& operator=(const ProtoDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoDevice& operator=(ProtoDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoDevice* internal_default_instance() {
    return reinterpret_cast<const ProtoDevice*>(
               &_ProtoDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoDevice& a, ProtoDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtoDevice& from) {
    ProtoDevice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.devices.ProtoDevice";
  }
  protected:
  explicit ProtoDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProtoDevice_Family Family;
  static constexpr Family CCD =
    ProtoDevice_Family_CCD;
  static constexpr Family MOUNT =
    ProtoDevice_Family_MOUNT;
  static constexpr Family FOCUSER =
    ProtoDevice_Family_FOCUSER;
  static constexpr Family FILTER_WHEEL =
    ProtoDevice_Family_FILTER_WHEEL;
  static constexpr Family POWER_BOX =
    ProtoDevice_Family_POWER_BOX;
  static inline bool Family_IsValid(int value) {
    return ProtoDevice_Family_IsValid(value);
  }
  static constexpr Family Family_MIN =
    ProtoDevice_Family_Family_MIN;
  static constexpr Family Family_MAX =
    ProtoDevice_Family_Family_MAX;
  static constexpr int Family_ARRAYSIZE =
    ProtoDevice_Family_Family_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Family_descriptor() {
    return ProtoDevice_Family_descriptor();
  }
  template<typename T>
  static inline const std::string& Family_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Family>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Family_Name.");
    return ProtoDevice_Family_Name(enum_t_value);
  }
  static inline bool Family_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Family* value) {
    return ProtoDevice_Family_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kFamilyFieldNumber = 6,
  };
  // repeated .lightspeed.props.Property properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::lightspeed::props::Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >*
      mutable_properties();
  private:
  const ::lightspeed::props::Property& _internal_properties(int index) const;
  ::lightspeed::props::Property* _internal_add_properties();
  public:
  const ::lightspeed::props::Property& properties(int index) const;
  ::lightspeed::props::Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >&
      properties() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .lightspeed.devices.ProtoDevice.Family family = 6;
  void clear_family();
  ::lightspeed::devices::ProtoDevice_Family family() const;
  void set_family(::lightspeed::devices::ProtoDevice_Family value);
  private:
  ::lightspeed::devices::ProtoDevice_Family _internal_family() const;
  void _internal_set_family(::lightspeed::devices::ProtoDevice_Family value);
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.devices.ProtoDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property > properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int family_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fdevices_2fdevice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoSerialDevice

// string id = 1;
inline void ProtoSerialDevice::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ProtoSerialDevice::id() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.ProtoSerialDevice.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoSerialDevice::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.devices.ProtoSerialDevice.id)
}
inline std::string* ProtoSerialDevice::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.ProtoSerialDevice.id)
  return _s;
}
inline const std::string& ProtoSerialDevice::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ProtoSerialDevice::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoSerialDevice::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoSerialDevice::release_id() {
  // @@protoc_insertion_point(field_release:lightspeed.devices.ProtoSerialDevice.id)
  return _impl_.id_.Release();
}
inline void ProtoSerialDevice::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.devices.ProtoSerialDevice.id)
}

// string name = 2;
inline void ProtoSerialDevice::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ProtoSerialDevice::name() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.ProtoSerialDevice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoSerialDevice::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.devices.ProtoSerialDevice.name)
}
inline std::string* ProtoSerialDevice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.ProtoSerialDevice.name)
  return _s;
}
inline const std::string& ProtoSerialDevice::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProtoSerialDevice::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoSerialDevice::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoSerialDevice::release_name() {
  // @@protoc_insertion_point(field_release:lightspeed.devices.ProtoSerialDevice.name)
  return _impl_.name_.Release();
}
inline void ProtoSerialDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.devices.ProtoSerialDevice.name)
}

// repeated .lightspeed.props.Property properties = 3;
inline int ProtoSerialDevice::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int ProtoSerialDevice::properties_size() const {
  return _internal_properties_size();
}
inline ::lightspeed::props::Property* ProtoSerialDevice::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.ProtoSerialDevice.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >*
ProtoSerialDevice::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:lightspeed.devices.ProtoSerialDevice.properties)
  return &_impl_.properties_;
}
inline const ::lightspeed::props::Property& ProtoSerialDevice::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::lightspeed::props::Property& ProtoSerialDevice::properties(int index) const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.ProtoSerialDevice.properties)
  return _internal_properties(index);
}
inline ::lightspeed::props::Property* ProtoSerialDevice::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::lightspeed::props::Property* ProtoSerialDevice::add_properties() {
  ::lightspeed::props::Property* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:lightspeed.devices.ProtoSerialDevice.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >&
ProtoSerialDevice::properties() const {
  // @@protoc_insertion_point(field_list:lightspeed.devices.ProtoSerialDevice.properties)
  return _impl_.properties_;
}

// string address = 4;
inline void ProtoSerialDevice::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& ProtoSerialDevice::address() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.ProtoSerialDevice.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoSerialDevice::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.devices.ProtoSerialDevice.address)
}
inline std::string* ProtoSerialDevice::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.ProtoSerialDevice.address)
  return _s;
}
inline const std::string& ProtoSerialDevice::_internal_address() const {
  return _impl_.address_.Get();
}
inline void ProtoSerialDevice::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoSerialDevice::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoSerialDevice::release_address() {
  // @@protoc_insertion_point(field_release:lightspeed.devices.ProtoSerialDevice.address)
  return _impl_.address_.Release();
}
inline void ProtoSerialDevice::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.devices.ProtoSerialDevice.address)
}

// int32 baud = 5;
inline void ProtoSerialDevice::clear_baud() {
  _impl_.baud_ = 0;
}
inline int32_t ProtoSerialDevice::_internal_baud() const {
  return _impl_.baud_;
}
inline int32_t ProtoSerialDevice::baud() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.ProtoSerialDevice.baud)
  return _internal_baud();
}
inline void ProtoSerialDevice::_internal_set_baud(int32_t value) {
  
  _impl_.baud_ = value;
}
inline void ProtoSerialDevice::set_baud(int32_t value) {
  _internal_set_baud(value);
  // @@protoc_insertion_point(field_set:lightspeed.devices.ProtoSerialDevice.baud)
}

// .lightspeed.devices.ProtoSerialDevice.Family family = 6;
inline void ProtoSerialDevice::clear_family() {
  _impl_.family_ = 0;
}
inline ::lightspeed::devices::ProtoSerialDevice_Family ProtoSerialDevice::_internal_family() const {
  return static_cast< ::lightspeed::devices::ProtoSerialDevice_Family >(_impl_.family_);
}
inline ::lightspeed::devices::ProtoSerialDevice_Family ProtoSerialDevice::family() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.ProtoSerialDevice.family)
  return _internal_family();
}
inline void ProtoSerialDevice::_internal_set_family(::lightspeed::devices::ProtoSerialDevice_Family value) {
  
  _impl_.family_ = value;
}
inline void ProtoSerialDevice::set_family(::lightspeed::devices::ProtoSerialDevice_Family value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:lightspeed.devices.ProtoSerialDevice.family)
}

// -------------------------------------------------------------------

// ProtoDevice

// string id = 1;
inline void ProtoDevice::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ProtoDevice::id() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.ProtoDevice.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoDevice::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.devices.ProtoDevice.id)
}
inline std::string* ProtoDevice::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.ProtoDevice.id)
  return _s;
}
inline const std::string& ProtoDevice::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ProtoDevice::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoDevice::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoDevice::release_id() {
  // @@protoc_insertion_point(field_release:lightspeed.devices.ProtoDevice.id)
  return _impl_.id_.Release();
}
inline void ProtoDevice::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.devices.ProtoDevice.id)
}

// string name = 2;
inline void ProtoDevice::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ProtoDevice::name() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.ProtoDevice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoDevice::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.devices.ProtoDevice.name)
}
inline std::string* ProtoDevice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.ProtoDevice.name)
  return _s;
}
inline const std::string& ProtoDevice::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProtoDevice::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoDevice::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoDevice::release_name() {
  // @@protoc_insertion_point(field_release:lightspeed.devices.ProtoDevice.name)
  return _impl_.name_.Release();
}
inline void ProtoDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.devices.ProtoDevice.name)
}

// repeated .lightspeed.props.Property properties = 3;
inline int ProtoDevice::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int ProtoDevice::properties_size() const {
  return _internal_properties_size();
}
inline ::lightspeed::props::Property* ProtoDevice::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.ProtoDevice.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >*
ProtoDevice::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:lightspeed.devices.ProtoDevice.properties)
  return &_impl_.properties_;
}
inline const ::lightspeed::props::Property& ProtoDevice::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::lightspeed::props::Property& ProtoDevice::properties(int index) const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.ProtoDevice.properties)
  return _internal_properties(index);
}
inline ::lightspeed::props::Property* ProtoDevice::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::lightspeed::props::Property* ProtoDevice::add_properties() {
  ::lightspeed::props::Property* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:lightspeed.devices.ProtoDevice.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >&
ProtoDevice::properties() const {
  // @@protoc_insertion_point(field_list:lightspeed.devices.ProtoDevice.properties)
  return _impl_.properties_;
}

// .lightspeed.devices.ProtoDevice.Family family = 6;
inline void ProtoDevice::clear_family() {
  _impl_.family_ = 0;
}
inline ::lightspeed::devices::ProtoDevice_Family ProtoDevice::_internal_family() const {
  return static_cast< ::lightspeed::devices::ProtoDevice_Family >(_impl_.family_);
}
inline ::lightspeed::devices::ProtoDevice_Family ProtoDevice::family() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.ProtoDevice.family)
  return _internal_family();
}
inline void ProtoDevice::_internal_set_family(::lightspeed::devices::ProtoDevice_Family value) {
  
  _impl_.family_ = value;
}
inline void ProtoDevice::set_family(::lightspeed::devices::ProtoDevice_Family value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:lightspeed.devices.ProtoDevice.family)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace devices
}  // namespace lightspeed

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lightspeed::devices::ProtoSerialDevice_Family> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lightspeed::devices::ProtoSerialDevice_Family>() {
  return ::lightspeed::devices::ProtoSerialDevice_Family_descriptor();
}
template <> struct is_proto_enum< ::lightspeed::devices::ProtoDevice_Family> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lightspeed::devices::ProtoDevice_Family>() {
  return ::lightspeed::devices::ProtoDevice_Family_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2fdevices_2fdevice_2eproto

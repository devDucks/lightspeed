// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/properties/props.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2fproperties_2fprops_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2fproperties_2fprops_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protocol/devices/actions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2fproperties_2fprops_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fproperties_2fprops_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fproperties_2fprops_2eproto;
namespace lightspeed {
namespace props {
class Property;
struct PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class SetPropertyRequest;
struct SetPropertyRequestDefaultTypeInternal;
extern SetPropertyRequestDefaultTypeInternal _SetPropertyRequest_default_instance_;
class SetPropertyResponse;
struct SetPropertyResponseDefaultTypeInternal;
extern SetPropertyResponseDefaultTypeInternal _SetPropertyResponse_default_instance_;
}  // namespace props
}  // namespace lightspeed
PROTOBUF_NAMESPACE_OPEN
template<> ::lightspeed::props::Property* Arena::CreateMaybeMessage<::lightspeed::props::Property>(Arena*);
template<> ::lightspeed::props::SetPropertyRequest* Arena::CreateMaybeMessage<::lightspeed::props::SetPropertyRequest>(Arena*);
template<> ::lightspeed::props::SetPropertyResponse* Arena::CreateMaybeMessage<::lightspeed::props::SetPropertyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lightspeed {
namespace props {

enum Permission : int {
  ReadOnly = 0,
  ReadWrite = 1,
  WriteOnly = 2,
  Permission_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Permission_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Permission_IsValid(int value);
constexpr Permission Permission_MIN = ReadOnly;
constexpr Permission Permission_MAX = WriteOnly;
constexpr int Permission_ARRAYSIZE = Permission_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Permission_descriptor();
template<typename T>
inline const std::string& Permission_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Permission>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Permission_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Permission_descriptor(), enum_t_value);
}
inline bool Permission_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Permission* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Permission>(
    Permission_descriptor(), name, value);
}
// ===================================================================

class Property final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.props.Property) */ {
 public:
  inline Property() : Property(nullptr) {}
  ~Property() override;
  explicit PROTOBUF_CONSTEXPR Property(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Property(const Property& from);
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Property& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Property& from) {
    Property::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.props.Property";
  }
  protected:
  explicit Property(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kKindFieldNumber = 3,
    kPermissionFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string kind = 3;
  void clear_kind();
  const std::string& kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kind();
  PROTOBUF_NODISCARD std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // .lightspeed.props.Permission permission = 4;
  void clear_permission();
  ::lightspeed::props::Permission permission() const;
  void set_permission(::lightspeed::props::Permission value);
  private:
  ::lightspeed::props::Permission _internal_permission() const;
  void _internal_set_permission(::lightspeed::props::Permission value);
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.props.Property)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
    int permission_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fproperties_2fprops_2eproto;
};
// -------------------------------------------------------------------

class SetPropertyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.props.SetPropertyRequest) */ {
 public:
  inline SetPropertyRequest() : SetPropertyRequest(nullptr) {}
  ~SetPropertyRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPropertyRequest(const SetPropertyRequest& from);
  SetPropertyRequest(SetPropertyRequest&& from) noexcept
    : SetPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetPropertyRequest& operator=(const SetPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPropertyRequest& operator=(SetPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetPropertyRequest*>(
               &_SetPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetPropertyRequest& a, SetPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPropertyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPropertyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPropertyRequest& from) {
    SetPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPropertyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.props.SetPropertyRequest";
  }
  protected:
  explicit SetPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kPropertyNameFieldNumber = 2,
    kPropertyValueFieldNumber = 3,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string property_name = 2;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_NODISCARD std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // string property_value = 3;
  void clear_property_value();
  const std::string& property_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_value();
  PROTOBUF_NODISCARD std::string* release_property_value();
  void set_allocated_property_value(std::string* property_value);
  private:
  const std::string& _internal_property_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_value(const std::string& value);
  std::string* _internal_mutable_property_value();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.props.SetPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fproperties_2fprops_2eproto;
};
// -------------------------------------------------------------------

class SetPropertyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.props.SetPropertyResponse) */ {
 public:
  inline SetPropertyResponse() : SetPropertyResponse(nullptr) {}
  ~SetPropertyResponse() override;
  explicit PROTOBUF_CONSTEXPR SetPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPropertyResponse(const SetPropertyResponse& from);
  SetPropertyResponse(SetPropertyResponse&& from) noexcept
    : SetPropertyResponse() {
    *this = ::std::move(from);
  }

  inline SetPropertyResponse& operator=(const SetPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPropertyResponse& operator=(SetPropertyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const SetPropertyResponse*>(
               &_SetPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetPropertyResponse& a, SetPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPropertyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPropertyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPropertyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPropertyResponse& from) {
    SetPropertyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPropertyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.props.SetPropertyResponse";
  }
  protected:
  explicit SetPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .lightspeed.devices.actions.DeviceActions status = 1;
  void clear_status();
  ::lightspeed::devices::actions::DeviceActions status() const;
  void set_status(::lightspeed::devices::actions::DeviceActions value);
  private:
  ::lightspeed::devices::actions::DeviceActions _internal_status() const;
  void _internal_set_status(::lightspeed::devices::actions::DeviceActions value);
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.props.SetPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fproperties_2fprops_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Property

// string name = 1;
inline void Property::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:lightspeed.props.Property.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Property::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.props.Property.name)
}
inline std::string* Property::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.props.Property.name)
  return _s;
}
inline const std::string& Property::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Property::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Property::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:lightspeed.props.Property.name)
  return _impl_.name_.Release();
}
inline void Property::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.props.Property.name)
}

// string value = 2;
inline void Property::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Property::value() const {
  // @@protoc_insertion_point(field_get:lightspeed.props.Property.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Property::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.props.Property.value)
}
inline std::string* Property::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:lightspeed.props.Property.value)
  return _s;
}
inline const std::string& Property::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Property::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Property::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Property::release_value() {
  // @@protoc_insertion_point(field_release:lightspeed.props.Property.value)
  return _impl_.value_.Release();
}
inline void Property::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.props.Property.value)
}

// string kind = 3;
inline void Property::clear_kind() {
  _impl_.kind_.ClearToEmpty();
}
inline const std::string& Property::kind() const {
  // @@protoc_insertion_point(field_get:lightspeed.props.Property.kind)
  return _internal_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Property::set_kind(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kind_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.props.Property.kind)
}
inline std::string* Property::mutable_kind() {
  std::string* _s = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:lightspeed.props.Property.kind)
  return _s;
}
inline const std::string& Property::_internal_kind() const {
  return _impl_.kind_.Get();
}
inline void Property::_internal_set_kind(const std::string& value) {
  
  _impl_.kind_.Set(value, GetArenaForAllocation());
}
inline std::string* Property::_internal_mutable_kind() {
  
  return _impl_.kind_.Mutable(GetArenaForAllocation());
}
inline std::string* Property::release_kind() {
  // @@protoc_insertion_point(field_release:lightspeed.props.Property.kind)
  return _impl_.kind_.Release();
}
inline void Property::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  _impl_.kind_.SetAllocated(kind, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.props.Property.kind)
}

// .lightspeed.props.Permission permission = 4;
inline void Property::clear_permission() {
  _impl_.permission_ = 0;
}
inline ::lightspeed::props::Permission Property::_internal_permission() const {
  return static_cast< ::lightspeed::props::Permission >(_impl_.permission_);
}
inline ::lightspeed::props::Permission Property::permission() const {
  // @@protoc_insertion_point(field_get:lightspeed.props.Property.permission)
  return _internal_permission();
}
inline void Property::_internal_set_permission(::lightspeed::props::Permission value) {
  
  _impl_.permission_ = value;
}
inline void Property::set_permission(::lightspeed::props::Permission value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:lightspeed.props.Property.permission)
}

// -------------------------------------------------------------------

// SetPropertyRequest

// string device_id = 1;
inline void SetPropertyRequest::clear_device_id() {
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& SetPropertyRequest::device_id() const {
  // @@protoc_insertion_point(field_get:lightspeed.props.SetPropertyRequest.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPropertyRequest::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.props.SetPropertyRequest.device_id)
}
inline std::string* SetPropertyRequest::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.props.SetPropertyRequest.device_id)
  return _s;
}
inline const std::string& SetPropertyRequest::_internal_device_id() const {
  return _impl_.device_id_.Get();
}
inline void SetPropertyRequest::_internal_set_device_id(const std::string& value) {
  
  _impl_.device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::_internal_mutable_device_id() {
  
  return _impl_.device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:lightspeed.props.SetPropertyRequest.device_id)
  return _impl_.device_id_.Release();
}
inline void SetPropertyRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  _impl_.device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.props.SetPropertyRequest.device_id)
}

// string property_name = 2;
inline void SetPropertyRequest::clear_property_name() {
  _impl_.property_name_.ClearToEmpty();
}
inline const std::string& SetPropertyRequest::property_name() const {
  // @@protoc_insertion_point(field_get:lightspeed.props.SetPropertyRequest.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPropertyRequest::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.property_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.props.SetPropertyRequest.property_name)
}
inline std::string* SetPropertyRequest::mutable_property_name() {
  std::string* _s = _internal_mutable_property_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.props.SetPropertyRequest.property_name)
  return _s;
}
inline const std::string& SetPropertyRequest::_internal_property_name() const {
  return _impl_.property_name_.Get();
}
inline void SetPropertyRequest::_internal_set_property_name(const std::string& value) {
  
  _impl_.property_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::_internal_mutable_property_name() {
  
  return _impl_.property_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::release_property_name() {
  // @@protoc_insertion_point(field_release:lightspeed.props.SetPropertyRequest.property_name)
  return _impl_.property_name_.Release();
}
inline void SetPropertyRequest::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  _impl_.property_name_.SetAllocated(property_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_name_.IsDefault()) {
    _impl_.property_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.props.SetPropertyRequest.property_name)
}

// string property_value = 3;
inline void SetPropertyRequest::clear_property_value() {
  _impl_.property_value_.ClearToEmpty();
}
inline const std::string& SetPropertyRequest::property_value() const {
  // @@protoc_insertion_point(field_get:lightspeed.props.SetPropertyRequest.property_value)
  return _internal_property_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPropertyRequest::set_property_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.property_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.props.SetPropertyRequest.property_value)
}
inline std::string* SetPropertyRequest::mutable_property_value() {
  std::string* _s = _internal_mutable_property_value();
  // @@protoc_insertion_point(field_mutable:lightspeed.props.SetPropertyRequest.property_value)
  return _s;
}
inline const std::string& SetPropertyRequest::_internal_property_value() const {
  return _impl_.property_value_.Get();
}
inline void SetPropertyRequest::_internal_set_property_value(const std::string& value) {
  
  _impl_.property_value_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::_internal_mutable_property_value() {
  
  return _impl_.property_value_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::release_property_value() {
  // @@protoc_insertion_point(field_release:lightspeed.props.SetPropertyRequest.property_value)
  return _impl_.property_value_.Release();
}
inline void SetPropertyRequest::set_allocated_property_value(std::string* property_value) {
  if (property_value != nullptr) {
    
  } else {
    
  }
  _impl_.property_value_.SetAllocated(property_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_value_.IsDefault()) {
    _impl_.property_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.props.SetPropertyRequest.property_value)
}

// -------------------------------------------------------------------

// SetPropertyResponse

// .lightspeed.devices.actions.DeviceActions status = 1;
inline void SetPropertyResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::lightspeed::devices::actions::DeviceActions SetPropertyResponse::_internal_status() const {
  return static_cast< ::lightspeed::devices::actions::DeviceActions >(_impl_.status_);
}
inline ::lightspeed::devices::actions::DeviceActions SetPropertyResponse::status() const {
  // @@protoc_insertion_point(field_get:lightspeed.props.SetPropertyResponse.status)
  return _internal_status();
}
inline void SetPropertyResponse::_internal_set_status(::lightspeed::devices::actions::DeviceActions value) {
  
  _impl_.status_ = value;
}
inline void SetPropertyResponse::set_status(::lightspeed::devices::actions::DeviceActions value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:lightspeed.props.SetPropertyResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace props
}  // namespace lightspeed

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lightspeed::props::Permission> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lightspeed::props::Permission>() {
  return ::lightspeed::props::Permission_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2fproperties_2fprops_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: requests/request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_requests_2frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_requests_2frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_requests_2frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_requests_2frequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_requests_2frequest_2eproto;
namespace lightspeed {
namespace request {
class CcdAbortExposureRequest;
struct CcdAbortExposureRequestDefaultTypeInternal;
extern CcdAbortExposureRequestDefaultTypeInternal _CcdAbortExposureRequest_default_instance_;
class CcdAbortExposureResponse;
struct CcdAbortExposureResponseDefaultTypeInternal;
extern CcdAbortExposureResponseDefaultTypeInternal _CcdAbortExposureResponse_default_instance_;
class CcdExposureRequest;
struct CcdExposureRequestDefaultTypeInternal;
extern CcdExposureRequestDefaultTypeInternal _CcdExposureRequest_default_instance_;
class CcdExposureResponse;
struct CcdExposureResponseDefaultTypeInternal;
extern CcdExposureResponseDefaultTypeInternal _CcdExposureResponse_default_instance_;
class EfwCalibrationRequest;
struct EfwCalibrationRequestDefaultTypeInternal;
extern EfwCalibrationRequestDefaultTypeInternal _EfwCalibrationRequest_default_instance_;
class GetDeviceRequest;
struct GetDeviceRequestDefaultTypeInternal;
extern GetDeviceRequestDefaultTypeInternal _GetDeviceRequest_default_instance_;
class GetDevicesRequest;
struct GetDevicesRequestDefaultTypeInternal;
extern GetDevicesRequestDefaultTypeInternal _GetDevicesRequest_default_instance_;
class GetPropertiesRequest;
struct GetPropertiesRequestDefaultTypeInternal;
extern GetPropertiesRequestDefaultTypeInternal _GetPropertiesRequest_default_instance_;
class GetPropertyRequest;
struct GetPropertyRequestDefaultTypeInternal;
extern GetPropertyRequestDefaultTypeInternal _GetPropertyRequest_default_instance_;
class PropertyRequest;
struct PropertyRequestDefaultTypeInternal;
extern PropertyRequestDefaultTypeInternal _PropertyRequest_default_instance_;
class SetPropertyRequest;
struct SetPropertyRequestDefaultTypeInternal;
extern SetPropertyRequestDefaultTypeInternal _SetPropertyRequest_default_instance_;
}  // namespace request
}  // namespace lightspeed
PROTOBUF_NAMESPACE_OPEN
template<> ::lightspeed::request::CcdAbortExposureRequest* Arena::CreateMaybeMessage<::lightspeed::request::CcdAbortExposureRequest>(Arena*);
template<> ::lightspeed::request::CcdAbortExposureResponse* Arena::CreateMaybeMessage<::lightspeed::request::CcdAbortExposureResponse>(Arena*);
template<> ::lightspeed::request::CcdExposureRequest* Arena::CreateMaybeMessage<::lightspeed::request::CcdExposureRequest>(Arena*);
template<> ::lightspeed::request::CcdExposureResponse* Arena::CreateMaybeMessage<::lightspeed::request::CcdExposureResponse>(Arena*);
template<> ::lightspeed::request::EfwCalibrationRequest* Arena::CreateMaybeMessage<::lightspeed::request::EfwCalibrationRequest>(Arena*);
template<> ::lightspeed::request::GetDeviceRequest* Arena::CreateMaybeMessage<::lightspeed::request::GetDeviceRequest>(Arena*);
template<> ::lightspeed::request::GetDevicesRequest* Arena::CreateMaybeMessage<::lightspeed::request::GetDevicesRequest>(Arena*);
template<> ::lightspeed::request::GetPropertiesRequest* Arena::CreateMaybeMessage<::lightspeed::request::GetPropertiesRequest>(Arena*);
template<> ::lightspeed::request::GetPropertyRequest* Arena::CreateMaybeMessage<::lightspeed::request::GetPropertyRequest>(Arena*);
template<> ::lightspeed::request::PropertyRequest* Arena::CreateMaybeMessage<::lightspeed::request::PropertyRequest>(Arena*);
template<> ::lightspeed::request::SetPropertyRequest* Arena::CreateMaybeMessage<::lightspeed::request::SetPropertyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lightspeed {
namespace request {

// ===================================================================

class GetDevicesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:lightspeed.request.GetDevicesRequest) */ {
 public:
  inline GetDevicesRequest() : GetDevicesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetDevicesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDevicesRequest(const GetDevicesRequest& from);
  GetDevicesRequest(GetDevicesRequest&& from) noexcept
    : GetDevicesRequest() {
    *this = ::std::move(from);
  }

  inline GetDevicesRequest& operator=(const GetDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevicesRequest& operator=(GetDevicesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDevicesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const GetDevicesRequest*>(
               &_GetDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetDevicesRequest& a, GetDevicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevicesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDevicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDevicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDevicesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetDevicesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetDevicesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.GetDevicesRequest";
  }
  protected:
  explicit GetDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lightspeed.request.GetDevicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.GetDeviceRequest) */ {
 public:
  inline GetDeviceRequest() : GetDeviceRequest(nullptr) {}
  ~GetDeviceRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceRequest(const GetDeviceRequest& from);
  GetDeviceRequest(GetDeviceRequest&& from) noexcept
    : GetDeviceRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceRequest& operator=(const GetDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceRequest& operator=(GetDeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceRequest*>(
               &_GetDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetDeviceRequest& a, GetDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDeviceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDeviceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDeviceRequest& from) {
    GetDeviceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.GetDeviceRequest";
  }
  protected:
  explicit GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.GetDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// -------------------------------------------------------------------

class GetPropertiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.GetPropertiesRequest) */ {
 public:
  inline GetPropertiesRequest() : GetPropertiesRequest(nullptr) {}
  ~GetPropertiesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPropertiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPropertiesRequest(const GetPropertiesRequest& from);
  GetPropertiesRequest(GetPropertiesRequest&& from) noexcept
    : GetPropertiesRequest() {
    *this = ::std::move(from);
  }

  inline GetPropertiesRequest& operator=(const GetPropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesRequest& operator=(GetPropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesRequest*>(
               &_GetPropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetPropertiesRequest& a, GetPropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPropertiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPropertiesRequest& from) {
    GetPropertiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPropertiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.GetPropertiesRequest";
  }
  protected:
  explicit GetPropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string device_name = 1;
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.GetPropertiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// -------------------------------------------------------------------

class GetPropertyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.GetPropertyRequest) */ {
 public:
  inline GetPropertyRequest() : GetPropertyRequest(nullptr) {}
  ~GetPropertyRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPropertyRequest(const GetPropertyRequest& from);
  GetPropertyRequest(GetPropertyRequest&& from) noexcept
    : GetPropertyRequest() {
    *this = ::std::move(from);
  }

  inline GetPropertyRequest& operator=(const GetPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertyRequest& operator=(GetPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const GetPropertyRequest*>(
               &_GetPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPropertyRequest& a, GetPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPropertyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPropertyRequest& from) {
    GetPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPropertyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.GetPropertyRequest";
  }
  protected:
  explicit GetPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
    kPropertyNameFieldNumber = 2,
  };
  // string device_name = 1;
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // string property_name = 2;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_NODISCARD std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.GetPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// -------------------------------------------------------------------

class SetPropertyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.SetPropertyRequest) */ {
 public:
  inline SetPropertyRequest() : SetPropertyRequest(nullptr) {}
  ~SetPropertyRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPropertyRequest(const SetPropertyRequest& from);
  SetPropertyRequest(SetPropertyRequest&& from) noexcept
    : SetPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetPropertyRequest& operator=(const SetPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPropertyRequest& operator=(SetPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetPropertyRequest*>(
               &_SetPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetPropertyRequest& a, SetPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPropertyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPropertyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPropertyRequest& from) {
    SetPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPropertyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.SetPropertyRequest";
  }
  protected:
  explicit SetPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
    kPropertyNameFieldNumber = 2,
    kPropertyValueFieldNumber = 3,
  };
  // string device_name = 1;
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // string property_name = 2;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_NODISCARD std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // string property_value = 3;
  void clear_property_value();
  const std::string& property_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_value();
  PROTOBUF_NODISCARD std::string* release_property_value();
  void set_allocated_property_value(std::string* property_value);
  private:
  const std::string& _internal_property_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_value(const std::string& value);
  std::string* _internal_mutable_property_value();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.SetPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// -------------------------------------------------------------------

class PropertyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.PropertyRequest) */ {
 public:
  inline PropertyRequest() : PropertyRequest(nullptr) {}
  ~PropertyRequest() override;
  explicit PROTOBUF_CONSTEXPR PropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyRequest(const PropertyRequest& from);
  PropertyRequest(PropertyRequest&& from) noexcept
    : PropertyRequest() {
    *this = ::std::move(from);
  }

  inline PropertyRequest& operator=(const PropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyRequest& operator=(PropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  enum AskCase {
    kProperty = 1,
    kProperties = 2,
    ASK_NOT_SET = 0,
  };

  static inline const PropertyRequest* internal_default_instance() {
    return reinterpret_cast<const PropertyRequest*>(
               &_PropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PropertyRequest& a, PropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyRequest& from) {
    PropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.PropertyRequest";
  }
  protected:
  explicit PropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 1,
    kPropertiesFieldNumber = 2,
  };
  // .lightspeed.request.GetPropertyRequest property = 1;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::lightspeed::request::GetPropertyRequest& property() const;
  PROTOBUF_NODISCARD ::lightspeed::request::GetPropertyRequest* release_property();
  ::lightspeed::request::GetPropertyRequest* mutable_property();
  void set_allocated_property(::lightspeed::request::GetPropertyRequest* property);
  private:
  const ::lightspeed::request::GetPropertyRequest& _internal_property() const;
  ::lightspeed::request::GetPropertyRequest* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::lightspeed::request::GetPropertyRequest* property);
  ::lightspeed::request::GetPropertyRequest* unsafe_arena_release_property();

  // .lightspeed.request.GetPropertiesRequest properties = 2;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::lightspeed::request::GetPropertiesRequest& properties() const;
  PROTOBUF_NODISCARD ::lightspeed::request::GetPropertiesRequest* release_properties();
  ::lightspeed::request::GetPropertiesRequest* mutable_properties();
  void set_allocated_properties(::lightspeed::request::GetPropertiesRequest* properties);
  private:
  const ::lightspeed::request::GetPropertiesRequest& _internal_properties() const;
  ::lightspeed::request::GetPropertiesRequest* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::lightspeed::request::GetPropertiesRequest* properties);
  ::lightspeed::request::GetPropertiesRequest* unsafe_arena_release_properties();

  void clear_ask();
  AskCase ask_case() const;
  // @@protoc_insertion_point(class_scope:lightspeed.request.PropertyRequest)
 private:
  class _Internal;
  void set_has_property();
  void set_has_properties();

  inline bool has_ask() const;
  inline void clear_has_ask();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union AskUnion {
      constexpr AskUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::lightspeed::request::GetPropertyRequest* property_;
      ::lightspeed::request::GetPropertiesRequest* properties_;
    } ask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// -------------------------------------------------------------------

class CcdExposureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.CcdExposureRequest) */ {
 public:
  inline CcdExposureRequest() : CcdExposureRequest(nullptr) {}
  ~CcdExposureRequest() override;
  explicit PROTOBUF_CONSTEXPR CcdExposureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CcdExposureRequest(const CcdExposureRequest& from);
  CcdExposureRequest(CcdExposureRequest&& from) noexcept
    : CcdExposureRequest() {
    *this = ::std::move(from);
  }

  inline CcdExposureRequest& operator=(const CcdExposureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CcdExposureRequest& operator=(CcdExposureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CcdExposureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CcdExposureRequest* internal_default_instance() {
    return reinterpret_cast<const CcdExposureRequest*>(
               &_CcdExposureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CcdExposureRequest& a, CcdExposureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CcdExposureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CcdExposureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CcdExposureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CcdExposureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CcdExposureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CcdExposureRequest& from) {
    CcdExposureRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CcdExposureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.CcdExposureRequest";
  }
  protected:
  explicit CcdExposureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLenghtFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // float lenght = 2;
  void clear_lenght();
  float lenght() const;
  void set_lenght(float value);
  private:
  float _internal_lenght() const;
  void _internal_set_lenght(float value);
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.CcdExposureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    float lenght_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// -------------------------------------------------------------------

class CcdExposureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.CcdExposureResponse) */ {
 public:
  inline CcdExposureResponse() : CcdExposureResponse(nullptr) {}
  ~CcdExposureResponse() override;
  explicit PROTOBUF_CONSTEXPR CcdExposureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CcdExposureResponse(const CcdExposureResponse& from);
  CcdExposureResponse(CcdExposureResponse&& from) noexcept
    : CcdExposureResponse() {
    *this = ::std::move(from);
  }

  inline CcdExposureResponse& operator=(const CcdExposureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CcdExposureResponse& operator=(CcdExposureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CcdExposureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CcdExposureResponse* internal_default_instance() {
    return reinterpret_cast<const CcdExposureResponse*>(
               &_CcdExposureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CcdExposureResponse& a, CcdExposureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CcdExposureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CcdExposureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CcdExposureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CcdExposureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CcdExposureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CcdExposureResponse& from) {
    CcdExposureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CcdExposureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.CcdExposureResponse";
  }
  protected:
  explicit CcdExposureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.CcdExposureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// -------------------------------------------------------------------

class CcdAbortExposureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.CcdAbortExposureRequest) */ {
 public:
  inline CcdAbortExposureRequest() : CcdAbortExposureRequest(nullptr) {}
  ~CcdAbortExposureRequest() override;
  explicit PROTOBUF_CONSTEXPR CcdAbortExposureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CcdAbortExposureRequest(const CcdAbortExposureRequest& from);
  CcdAbortExposureRequest(CcdAbortExposureRequest&& from) noexcept
    : CcdAbortExposureRequest() {
    *this = ::std::move(from);
  }

  inline CcdAbortExposureRequest& operator=(const CcdAbortExposureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CcdAbortExposureRequest& operator=(CcdAbortExposureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CcdAbortExposureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CcdAbortExposureRequest* internal_default_instance() {
    return reinterpret_cast<const CcdAbortExposureRequest*>(
               &_CcdAbortExposureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CcdAbortExposureRequest& a, CcdAbortExposureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CcdAbortExposureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CcdAbortExposureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CcdAbortExposureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CcdAbortExposureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CcdAbortExposureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CcdAbortExposureRequest& from) {
    CcdAbortExposureRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CcdAbortExposureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.CcdAbortExposureRequest";
  }
  protected:
  explicit CcdAbortExposureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.CcdAbortExposureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// -------------------------------------------------------------------

class CcdAbortExposureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.CcdAbortExposureResponse) */ {
 public:
  inline CcdAbortExposureResponse() : CcdAbortExposureResponse(nullptr) {}
  ~CcdAbortExposureResponse() override;
  explicit PROTOBUF_CONSTEXPR CcdAbortExposureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CcdAbortExposureResponse(const CcdAbortExposureResponse& from);
  CcdAbortExposureResponse(CcdAbortExposureResponse&& from) noexcept
    : CcdAbortExposureResponse() {
    *this = ::std::move(from);
  }

  inline CcdAbortExposureResponse& operator=(const CcdAbortExposureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CcdAbortExposureResponse& operator=(CcdAbortExposureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CcdAbortExposureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CcdAbortExposureResponse* internal_default_instance() {
    return reinterpret_cast<const CcdAbortExposureResponse*>(
               &_CcdAbortExposureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CcdAbortExposureResponse& a, CcdAbortExposureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CcdAbortExposureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CcdAbortExposureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CcdAbortExposureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CcdAbortExposureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CcdAbortExposureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CcdAbortExposureResponse& from) {
    CcdAbortExposureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CcdAbortExposureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.CcdAbortExposureResponse";
  }
  protected:
  explicit CcdAbortExposureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.CcdAbortExposureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// -------------------------------------------------------------------

class EfwCalibrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.EfwCalibrationRequest) */ {
 public:
  inline EfwCalibrationRequest() : EfwCalibrationRequest(nullptr) {}
  ~EfwCalibrationRequest() override;
  explicit PROTOBUF_CONSTEXPR EfwCalibrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EfwCalibrationRequest(const EfwCalibrationRequest& from);
  EfwCalibrationRequest(EfwCalibrationRequest&& from) noexcept
    : EfwCalibrationRequest() {
    *this = ::std::move(from);
  }

  inline EfwCalibrationRequest& operator=(const EfwCalibrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EfwCalibrationRequest& operator=(EfwCalibrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EfwCalibrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EfwCalibrationRequest* internal_default_instance() {
    return reinterpret_cast<const EfwCalibrationRequest*>(
               &_EfwCalibrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EfwCalibrationRequest& a, EfwCalibrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EfwCalibrationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EfwCalibrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EfwCalibrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EfwCalibrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EfwCalibrationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EfwCalibrationRequest& from) {
    EfwCalibrationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EfwCalibrationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.EfwCalibrationRequest";
  }
  protected:
  explicit EfwCalibrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.EfwCalibrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDevicesRequest

// -------------------------------------------------------------------

// GetDeviceRequest

// string device_id = 1;
inline void GetDeviceRequest::clear_device_id() {
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& GetDeviceRequest::device_id() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.GetDeviceRequest.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDeviceRequest::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.GetDeviceRequest.device_id)
}
inline std::string* GetDeviceRequest::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.GetDeviceRequest.device_id)
  return _s;
}
inline const std::string& GetDeviceRequest::_internal_device_id() const {
  return _impl_.device_id_.Get();
}
inline void GetDeviceRequest::_internal_set_device_id(const std::string& value) {
  
  _impl_.device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDeviceRequest::_internal_mutable_device_id() {
  
  return _impl_.device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDeviceRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:lightspeed.request.GetDeviceRequest.device_id)
  return _impl_.device_id_.Release();
}
inline void GetDeviceRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  _impl_.device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.GetDeviceRequest.device_id)
}

// -------------------------------------------------------------------

// GetPropertiesRequest

// string device_name = 1;
inline void GetPropertiesRequest::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& GetPropertiesRequest::device_name() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.GetPropertiesRequest.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPropertiesRequest::set_device_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.GetPropertiesRequest.device_name)
}
inline std::string* GetPropertiesRequest::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.GetPropertiesRequest.device_name)
  return _s;
}
inline const std::string& GetPropertiesRequest::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void GetPropertiesRequest::_internal_set_device_name(const std::string& value) {
  
  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPropertiesRequest::_internal_mutable_device_name() {
  
  return _impl_.device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPropertiesRequest::release_device_name() {
  // @@protoc_insertion_point(field_release:lightspeed.request.GetPropertiesRequest.device_name)
  return _impl_.device_name_.Release();
}
inline void GetPropertiesRequest::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  _impl_.device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.GetPropertiesRequest.device_name)
}

// -------------------------------------------------------------------

// GetPropertyRequest

// string device_name = 1;
inline void GetPropertyRequest::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& GetPropertyRequest::device_name() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.GetPropertyRequest.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPropertyRequest::set_device_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.GetPropertyRequest.device_name)
}
inline std::string* GetPropertyRequest::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.GetPropertyRequest.device_name)
  return _s;
}
inline const std::string& GetPropertyRequest::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void GetPropertyRequest::_internal_set_device_name(const std::string& value) {
  
  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPropertyRequest::_internal_mutable_device_name() {
  
  return _impl_.device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPropertyRequest::release_device_name() {
  // @@protoc_insertion_point(field_release:lightspeed.request.GetPropertyRequest.device_name)
  return _impl_.device_name_.Release();
}
inline void GetPropertyRequest::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  _impl_.device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.GetPropertyRequest.device_name)
}

// string property_name = 2;
inline void GetPropertyRequest::clear_property_name() {
  _impl_.property_name_.ClearToEmpty();
}
inline const std::string& GetPropertyRequest::property_name() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.GetPropertyRequest.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPropertyRequest::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.property_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.GetPropertyRequest.property_name)
}
inline std::string* GetPropertyRequest::mutable_property_name() {
  std::string* _s = _internal_mutable_property_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.GetPropertyRequest.property_name)
  return _s;
}
inline const std::string& GetPropertyRequest::_internal_property_name() const {
  return _impl_.property_name_.Get();
}
inline void GetPropertyRequest::_internal_set_property_name(const std::string& value) {
  
  _impl_.property_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPropertyRequest::_internal_mutable_property_name() {
  
  return _impl_.property_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPropertyRequest::release_property_name() {
  // @@protoc_insertion_point(field_release:lightspeed.request.GetPropertyRequest.property_name)
  return _impl_.property_name_.Release();
}
inline void GetPropertyRequest::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  _impl_.property_name_.SetAllocated(property_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_name_.IsDefault()) {
    _impl_.property_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.GetPropertyRequest.property_name)
}

// -------------------------------------------------------------------

// SetPropertyRequest

// string device_name = 1;
inline void SetPropertyRequest::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& SetPropertyRequest::device_name() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.SetPropertyRequest.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPropertyRequest::set_device_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.SetPropertyRequest.device_name)
}
inline std::string* SetPropertyRequest::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.SetPropertyRequest.device_name)
  return _s;
}
inline const std::string& SetPropertyRequest::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void SetPropertyRequest::_internal_set_device_name(const std::string& value) {
  
  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::_internal_mutable_device_name() {
  
  return _impl_.device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::release_device_name() {
  // @@protoc_insertion_point(field_release:lightspeed.request.SetPropertyRequest.device_name)
  return _impl_.device_name_.Release();
}
inline void SetPropertyRequest::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  _impl_.device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.SetPropertyRequest.device_name)
}

// string property_name = 2;
inline void SetPropertyRequest::clear_property_name() {
  _impl_.property_name_.ClearToEmpty();
}
inline const std::string& SetPropertyRequest::property_name() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.SetPropertyRequest.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPropertyRequest::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.property_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.SetPropertyRequest.property_name)
}
inline std::string* SetPropertyRequest::mutable_property_name() {
  std::string* _s = _internal_mutable_property_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.SetPropertyRequest.property_name)
  return _s;
}
inline const std::string& SetPropertyRequest::_internal_property_name() const {
  return _impl_.property_name_.Get();
}
inline void SetPropertyRequest::_internal_set_property_name(const std::string& value) {
  
  _impl_.property_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::_internal_mutable_property_name() {
  
  return _impl_.property_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::release_property_name() {
  // @@protoc_insertion_point(field_release:lightspeed.request.SetPropertyRequest.property_name)
  return _impl_.property_name_.Release();
}
inline void SetPropertyRequest::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  _impl_.property_name_.SetAllocated(property_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_name_.IsDefault()) {
    _impl_.property_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.SetPropertyRequest.property_name)
}

// string property_value = 3;
inline void SetPropertyRequest::clear_property_value() {
  _impl_.property_value_.ClearToEmpty();
}
inline const std::string& SetPropertyRequest::property_value() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.SetPropertyRequest.property_value)
  return _internal_property_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPropertyRequest::set_property_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.property_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.SetPropertyRequest.property_value)
}
inline std::string* SetPropertyRequest::mutable_property_value() {
  std::string* _s = _internal_mutable_property_value();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.SetPropertyRequest.property_value)
  return _s;
}
inline const std::string& SetPropertyRequest::_internal_property_value() const {
  return _impl_.property_value_.Get();
}
inline void SetPropertyRequest::_internal_set_property_value(const std::string& value) {
  
  _impl_.property_value_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::_internal_mutable_property_value() {
  
  return _impl_.property_value_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::release_property_value() {
  // @@protoc_insertion_point(field_release:lightspeed.request.SetPropertyRequest.property_value)
  return _impl_.property_value_.Release();
}
inline void SetPropertyRequest::set_allocated_property_value(std::string* property_value) {
  if (property_value != nullptr) {
    
  } else {
    
  }
  _impl_.property_value_.SetAllocated(property_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_value_.IsDefault()) {
    _impl_.property_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.SetPropertyRequest.property_value)
}

// -------------------------------------------------------------------

// PropertyRequest

// .lightspeed.request.GetPropertyRequest property = 1;
inline bool PropertyRequest::_internal_has_property() const {
  return ask_case() == kProperty;
}
inline bool PropertyRequest::has_property() const {
  return _internal_has_property();
}
inline void PropertyRequest::set_has_property() {
  _impl_._oneof_case_[0] = kProperty;
}
inline void PropertyRequest::clear_property() {
  if (_internal_has_property()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ask_.property_;
    }
    clear_has_ask();
  }
}
inline ::lightspeed::request::GetPropertyRequest* PropertyRequest::release_property() {
  // @@protoc_insertion_point(field_release:lightspeed.request.PropertyRequest.property)
  if (_internal_has_property()) {
    clear_has_ask();
    ::lightspeed::request::GetPropertyRequest* temp = _impl_.ask_.property_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ask_.property_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lightspeed::request::GetPropertyRequest& PropertyRequest::_internal_property() const {
  return _internal_has_property()
      ? *_impl_.ask_.property_
      : reinterpret_cast< ::lightspeed::request::GetPropertyRequest&>(::lightspeed::request::_GetPropertyRequest_default_instance_);
}
inline const ::lightspeed::request::GetPropertyRequest& PropertyRequest::property() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.PropertyRequest.property)
  return _internal_property();
}
inline ::lightspeed::request::GetPropertyRequest* PropertyRequest::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lightspeed.request.PropertyRequest.property)
  if (_internal_has_property()) {
    clear_has_ask();
    ::lightspeed::request::GetPropertyRequest* temp = _impl_.ask_.property_;
    _impl_.ask_.property_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyRequest::unsafe_arena_set_allocated_property(::lightspeed::request::GetPropertyRequest* property) {
  clear_ask();
  if (property) {
    set_has_property();
    _impl_.ask_.property_ = property;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lightspeed.request.PropertyRequest.property)
}
inline ::lightspeed::request::GetPropertyRequest* PropertyRequest::_internal_mutable_property() {
  if (!_internal_has_property()) {
    clear_ask();
    set_has_property();
    _impl_.ask_.property_ = CreateMaybeMessage< ::lightspeed::request::GetPropertyRequest >(GetArenaForAllocation());
  }
  return _impl_.ask_.property_;
}
inline ::lightspeed::request::GetPropertyRequest* PropertyRequest::mutable_property() {
  ::lightspeed::request::GetPropertyRequest* _msg = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.PropertyRequest.property)
  return _msg;
}

// .lightspeed.request.GetPropertiesRequest properties = 2;
inline bool PropertyRequest::_internal_has_properties() const {
  return ask_case() == kProperties;
}
inline bool PropertyRequest::has_properties() const {
  return _internal_has_properties();
}
inline void PropertyRequest::set_has_properties() {
  _impl_._oneof_case_[0] = kProperties;
}
inline void PropertyRequest::clear_properties() {
  if (_internal_has_properties()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ask_.properties_;
    }
    clear_has_ask();
  }
}
inline ::lightspeed::request::GetPropertiesRequest* PropertyRequest::release_properties() {
  // @@protoc_insertion_point(field_release:lightspeed.request.PropertyRequest.properties)
  if (_internal_has_properties()) {
    clear_has_ask();
    ::lightspeed::request::GetPropertiesRequest* temp = _impl_.ask_.properties_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ask_.properties_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lightspeed::request::GetPropertiesRequest& PropertyRequest::_internal_properties() const {
  return _internal_has_properties()
      ? *_impl_.ask_.properties_
      : reinterpret_cast< ::lightspeed::request::GetPropertiesRequest&>(::lightspeed::request::_GetPropertiesRequest_default_instance_);
}
inline const ::lightspeed::request::GetPropertiesRequest& PropertyRequest::properties() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.PropertyRequest.properties)
  return _internal_properties();
}
inline ::lightspeed::request::GetPropertiesRequest* PropertyRequest::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lightspeed.request.PropertyRequest.properties)
  if (_internal_has_properties()) {
    clear_has_ask();
    ::lightspeed::request::GetPropertiesRequest* temp = _impl_.ask_.properties_;
    _impl_.ask_.properties_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyRequest::unsafe_arena_set_allocated_properties(::lightspeed::request::GetPropertiesRequest* properties) {
  clear_ask();
  if (properties) {
    set_has_properties();
    _impl_.ask_.properties_ = properties;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lightspeed.request.PropertyRequest.properties)
}
inline ::lightspeed::request::GetPropertiesRequest* PropertyRequest::_internal_mutable_properties() {
  if (!_internal_has_properties()) {
    clear_ask();
    set_has_properties();
    _impl_.ask_.properties_ = CreateMaybeMessage< ::lightspeed::request::GetPropertiesRequest >(GetArenaForAllocation());
  }
  return _impl_.ask_.properties_;
}
inline ::lightspeed::request::GetPropertiesRequest* PropertyRequest::mutable_properties() {
  ::lightspeed::request::GetPropertiesRequest* _msg = _internal_mutable_properties();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.PropertyRequest.properties)
  return _msg;
}

inline bool PropertyRequest::has_ask() const {
  return ask_case() != ASK_NOT_SET;
}
inline void PropertyRequest::clear_has_ask() {
  _impl_._oneof_case_[0] = ASK_NOT_SET;
}
inline PropertyRequest::AskCase PropertyRequest::ask_case() const {
  return PropertyRequest::AskCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CcdExposureRequest

// string id = 1;
inline void CcdExposureRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CcdExposureRequest::id() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.CcdExposureRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CcdExposureRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.CcdExposureRequest.id)
}
inline std::string* CcdExposureRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.CcdExposureRequest.id)
  return _s;
}
inline const std::string& CcdExposureRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CcdExposureRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CcdExposureRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CcdExposureRequest::release_id() {
  // @@protoc_insertion_point(field_release:lightspeed.request.CcdExposureRequest.id)
  return _impl_.id_.Release();
}
inline void CcdExposureRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.CcdExposureRequest.id)
}

// float lenght = 2;
inline void CcdExposureRequest::clear_lenght() {
  _impl_.lenght_ = 0;
}
inline float CcdExposureRequest::_internal_lenght() const {
  return _impl_.lenght_;
}
inline float CcdExposureRequest::lenght() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.CcdExposureRequest.lenght)
  return _internal_lenght();
}
inline void CcdExposureRequest::_internal_set_lenght(float value) {
  
  _impl_.lenght_ = value;
}
inline void CcdExposureRequest::set_lenght(float value) {
  _internal_set_lenght(value);
  // @@protoc_insertion_point(field_set:lightspeed.request.CcdExposureRequest.lenght)
}

// -------------------------------------------------------------------

// CcdExposureResponse

// bytes data = 1;
inline void CcdExposureResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& CcdExposureResponse::data() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.CcdExposureResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CcdExposureResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.CcdExposureResponse.data)
}
inline std::string* CcdExposureResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.CcdExposureResponse.data)
  return _s;
}
inline const std::string& CcdExposureResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CcdExposureResponse::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CcdExposureResponse::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CcdExposureResponse::release_data() {
  // @@protoc_insertion_point(field_release:lightspeed.request.CcdExposureResponse.data)
  return _impl_.data_.Release();
}
inline void CcdExposureResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.CcdExposureResponse.data)
}

// -------------------------------------------------------------------

// CcdAbortExposureRequest

// string id = 1;
inline void CcdAbortExposureRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CcdAbortExposureRequest::id() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.CcdAbortExposureRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CcdAbortExposureRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.CcdAbortExposureRequest.id)
}
inline std::string* CcdAbortExposureRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.CcdAbortExposureRequest.id)
  return _s;
}
inline const std::string& CcdAbortExposureRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CcdAbortExposureRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CcdAbortExposureRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CcdAbortExposureRequest::release_id() {
  // @@protoc_insertion_point(field_release:lightspeed.request.CcdAbortExposureRequest.id)
  return _impl_.id_.Release();
}
inline void CcdAbortExposureRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.CcdAbortExposureRequest.id)
}

// -------------------------------------------------------------------

// CcdAbortExposureResponse

// string status = 1;
inline void CcdAbortExposureResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& CcdAbortExposureResponse::status() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.CcdAbortExposureResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CcdAbortExposureResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.CcdAbortExposureResponse.status)
}
inline std::string* CcdAbortExposureResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.CcdAbortExposureResponse.status)
  return _s;
}
inline const std::string& CcdAbortExposureResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void CcdAbortExposureResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* CcdAbortExposureResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* CcdAbortExposureResponse::release_status() {
  // @@protoc_insertion_point(field_release:lightspeed.request.CcdAbortExposureResponse.status)
  return _impl_.status_.Release();
}
inline void CcdAbortExposureResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.CcdAbortExposureResponse.status)
}

// -------------------------------------------------------------------

// EfwCalibrationRequest

// string id = 1;
inline void EfwCalibrationRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& EfwCalibrationRequest::id() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.EfwCalibrationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EfwCalibrationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.EfwCalibrationRequest.id)
}
inline std::string* EfwCalibrationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.EfwCalibrationRequest.id)
  return _s;
}
inline const std::string& EfwCalibrationRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void EfwCalibrationRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* EfwCalibrationRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* EfwCalibrationRequest::release_id() {
  // @@protoc_insertion_point(field_release:lightspeed.request.EfwCalibrationRequest.id)
  return _impl_.id_.Release();
}
inline void EfwCalibrationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.EfwCalibrationRequest.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace lightspeed

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_requests_2frequest_2eproto

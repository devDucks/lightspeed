// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: requests/request.proto

#include "requests/request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace lightspeed {
namespace request {
PROTOBUF_CONSTEXPR GetDevicesRequest::GetDevicesRequest(
    ::_pbi::ConstantInitialized) {}
struct GetDevicesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDevicesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDevicesRequestDefaultTypeInternal() {}
  union {
    GetDevicesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDevicesRequestDefaultTypeInternal _GetDevicesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceRequest::GetDeviceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceRequestDefaultTypeInternal() {}
  union {
    GetDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceRequestDefaultTypeInternal _GetDeviceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPropertiesRequest::GetPropertiesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPropertiesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPropertiesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPropertiesRequestDefaultTypeInternal() {}
  union {
    GetPropertiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPropertiesRequestDefaultTypeInternal _GetPropertiesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPropertyRequest::GetPropertyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.property_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPropertyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPropertyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPropertyRequestDefaultTypeInternal() {}
  union {
    GetPropertyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPropertyRequestDefaultTypeInternal _GetPropertyRequest_default_instance_;
PROTOBUF_CONSTEXPR SetPropertyRequest::SetPropertyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.property_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.property_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetPropertyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPropertyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPropertyRequestDefaultTypeInternal() {}
  union {
    SetPropertyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPropertyRequestDefaultTypeInternal _SetPropertyRequest_default_instance_;
PROTOBUF_CONSTEXPR PropertyRequest::PropertyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ask_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PropertyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyRequestDefaultTypeInternal() {}
  union {
    PropertyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyRequestDefaultTypeInternal _PropertyRequest_default_instance_;
PROTOBUF_CONSTEXPR CcdExposureRequest::CcdExposureRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lenght_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CcdExposureRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CcdExposureRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CcdExposureRequestDefaultTypeInternal() {}
  union {
    CcdExposureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CcdExposureRequestDefaultTypeInternal _CcdExposureRequest_default_instance_;
PROTOBUF_CONSTEXPR CcdExposureResponse::CcdExposureResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CcdExposureResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CcdExposureResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CcdExposureResponseDefaultTypeInternal() {}
  union {
    CcdExposureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CcdExposureResponseDefaultTypeInternal _CcdExposureResponse_default_instance_;
PROTOBUF_CONSTEXPR CcdAbortExposureRequest::CcdAbortExposureRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CcdAbortExposureRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CcdAbortExposureRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CcdAbortExposureRequestDefaultTypeInternal() {}
  union {
    CcdAbortExposureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CcdAbortExposureRequestDefaultTypeInternal _CcdAbortExposureRequest_default_instance_;
PROTOBUF_CONSTEXPR CcdAbortExposureResponse::CcdAbortExposureResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CcdAbortExposureResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CcdAbortExposureResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CcdAbortExposureResponseDefaultTypeInternal() {}
  union {
    CcdAbortExposureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CcdAbortExposureResponseDefaultTypeInternal _CcdAbortExposureResponse_default_instance_;
PROTOBUF_CONSTEXPR EfwCalibrationRequest::EfwCalibrationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EfwCalibrationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EfwCalibrationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EfwCalibrationRequestDefaultTypeInternal() {}
  union {
    EfwCalibrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EfwCalibrationRequestDefaultTypeInternal _EfwCalibrationRequest_default_instance_;
}  // namespace request
}  // namespace lightspeed
static ::_pb::Metadata file_level_metadata_requests_2frequest_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_requests_2frequest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_requests_2frequest_2eproto = nullptr;

const uint32_t TableStruct_requests_2frequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::GetDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::GetDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::GetDeviceRequest, _impl_.device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::GetPropertiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::GetPropertiesRequest, _impl_.device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::GetPropertyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::GetPropertyRequest, _impl_.device_id_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::GetPropertyRequest, _impl_.property_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::SetPropertyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::SetPropertyRequest, _impl_.device_id_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::SetPropertyRequest, _impl_.property_name_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::SetPropertyRequest, _impl_.property_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::PropertyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::PropertyRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::PropertyRequest, _impl_.ask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::CcdExposureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::CcdExposureRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::CcdExposureRequest, _impl_.lenght_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::CcdExposureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::CcdExposureResponse, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::CcdAbortExposureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::CcdAbortExposureRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::CcdAbortExposureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::CcdAbortExposureResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::EfwCalibrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::request::EfwCalibrationRequest, _impl_.id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::lightspeed::request::GetDevicesRequest)},
  { 6, -1, -1, sizeof(::lightspeed::request::GetDeviceRequest)},
  { 13, -1, -1, sizeof(::lightspeed::request::GetPropertiesRequest)},
  { 20, -1, -1, sizeof(::lightspeed::request::GetPropertyRequest)},
  { 28, -1, -1, sizeof(::lightspeed::request::SetPropertyRequest)},
  { 37, -1, -1, sizeof(::lightspeed::request::PropertyRequest)},
  { 46, -1, -1, sizeof(::lightspeed::request::CcdExposureRequest)},
  { 54, -1, -1, sizeof(::lightspeed::request::CcdExposureResponse)},
  { 61, -1, -1, sizeof(::lightspeed::request::CcdAbortExposureRequest)},
  { 68, -1, -1, sizeof(::lightspeed::request::CcdAbortExposureResponse)},
  { 75, -1, -1, sizeof(::lightspeed::request::EfwCalibrationRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::lightspeed::request::_GetDevicesRequest_default_instance_._instance,
  &::lightspeed::request::_GetDeviceRequest_default_instance_._instance,
  &::lightspeed::request::_GetPropertiesRequest_default_instance_._instance,
  &::lightspeed::request::_GetPropertyRequest_default_instance_._instance,
  &::lightspeed::request::_SetPropertyRequest_default_instance_._instance,
  &::lightspeed::request::_PropertyRequest_default_instance_._instance,
  &::lightspeed::request::_CcdExposureRequest_default_instance_._instance,
  &::lightspeed::request::_CcdExposureResponse_default_instance_._instance,
  &::lightspeed::request::_CcdAbortExposureRequest_default_instance_._instance,
  &::lightspeed::request::_CcdAbortExposureResponse_default_instance_._instance,
  &::lightspeed::request::_EfwCalibrationRequest_default_instance_._instance,
};

const char descriptor_table_protodef_requests_2frequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026requests/request.proto\022\022lightspeed.req"
  "uest\"\023\n\021GetDevicesRequest\"%\n\020GetDeviceRe"
  "quest\022\021\n\tdevice_id\030\001 \001(\t\")\n\024GetPropertie"
  "sRequest\022\021\n\tdevice_id\030\001 \001(\t\">\n\022GetProper"
  "tyRequest\022\021\n\tdevice_id\030\001 \001(\t\022\025\n\rproperty"
  "_name\030\002 \001(\t\"V\n\022SetPropertyRequest\022\021\n\tdev"
  "ice_id\030\001 \001(\t\022\025\n\rproperty_name\030\002 \001(\t\022\026\n\016p"
  "roperty_value\030\003 \001(\t\"\224\001\n\017PropertyRequest\022"
  ":\n\010property\030\001 \001(\0132&.lightspeed.request.G"
  "etPropertyRequestH\000\022>\n\nproperties\030\002 \001(\0132"
  "(.lightspeed.request.GetPropertiesReques"
  "tH\000B\005\n\003ask\"0\n\022CcdExposureRequest\022\n\n\002id\030\001"
  " \001(\t\022\016\n\006lenght\030\002 \001(\002\"#\n\023CcdExposureRespo"
  "nse\022\014\n\004data\030\001 \001(\014\"%\n\027CcdAbortExposureReq"
  "uest\022\n\n\002id\030\001 \001(\t\"*\n\030CcdAbortExposureResp"
  "onse\022\016\n\006status\030\001 \001(\t\"#\n\025EfwCalibrationRe"
  "quest\022\n\n\002id\030\001 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_requests_2frequest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_requests_2frequest_2eproto = {
    false, false, 665, descriptor_table_protodef_requests_2frequest_2eproto,
    "requests/request.proto",
    &descriptor_table_requests_2frequest_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_requests_2frequest_2eproto::offsets,
    file_level_metadata_requests_2frequest_2eproto, file_level_enum_descriptors_requests_2frequest_2eproto,
    file_level_service_descriptors_requests_2frequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_requests_2frequest_2eproto_getter() {
  return &descriptor_table_requests_2frequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_requests_2frequest_2eproto(&descriptor_table_requests_2frequest_2eproto);
namespace lightspeed {
namespace request {

// ===================================================================

class GetDevicesRequest::_Internal {
 public:
};

GetDevicesRequest::GetDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.GetDevicesRequest)
}
GetDevicesRequest::GetDevicesRequest(const GetDevicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetDevicesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.GetDevicesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDevicesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDevicesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetDevicesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[0]);
}

// ===================================================================

class GetDeviceRequest::_Internal {
 public:
};

GetDeviceRequest::GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.GetDeviceRequest)
}
GetDeviceRequest::GetDeviceRequest(const GetDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    _this->_impl_.device_id_.Set(from._internal_device_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.GetDeviceRequest)
}

inline void GetDeviceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDeviceRequest::~GetDeviceRequest() {
  // @@protoc_insertion_point(destructor:lightspeed.request.GetDeviceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_id_.Destroy();
}

void GetDeviceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.request.GetDeviceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.GetDeviceRequest.device_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.request.GetDeviceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.GetDeviceRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.request.GetDeviceRequest)
  return target;
}

size_t GetDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.request.GetDeviceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceRequest::GetClassData() const { return &_class_data_; }


void GetDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceRequest*>(&to_msg);
  auto& from = static_cast<const GetDeviceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.request.GetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceRequest::CopyFrom(const GetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.request.GetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceRequest::IsInitialized() const {
  return true;
}

void GetDeviceRequest::InternalSwap(GetDeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_id_, lhs_arena,
      &other->_impl_.device_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[1]);
}

// ===================================================================

class GetPropertiesRequest::_Internal {
 public:
};

GetPropertiesRequest::GetPropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.GetPropertiesRequest)
}
GetPropertiesRequest::GetPropertiesRequest(const GetPropertiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPropertiesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    _this->_impl_.device_id_.Set(from._internal_device_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.GetPropertiesRequest)
}

inline void GetPropertiesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPropertiesRequest::~GetPropertiesRequest() {
  // @@protoc_insertion_point(destructor:lightspeed.request.GetPropertiesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPropertiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_id_.Destroy();
}

void GetPropertiesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPropertiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.request.GetPropertiesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPropertiesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.GetPropertiesRequest.device_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPropertiesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.request.GetPropertiesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.GetPropertiesRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.request.GetPropertiesRequest)
  return target;
}

size_t GetPropertiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.request.GetPropertiesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPropertiesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPropertiesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPropertiesRequest::GetClassData() const { return &_class_data_; }


void GetPropertiesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPropertiesRequest*>(&to_msg);
  auto& from = static_cast<const GetPropertiesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.request.GetPropertiesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPropertiesRequest::CopyFrom(const GetPropertiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.request.GetPropertiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropertiesRequest::IsInitialized() const {
  return true;
}

void GetPropertiesRequest::InternalSwap(GetPropertiesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_id_, lhs_arena,
      &other->_impl_.device_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPropertiesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[2]);
}

// ===================================================================

class GetPropertyRequest::_Internal {
 public:
};

GetPropertyRequest::GetPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.GetPropertyRequest)
}
GetPropertyRequest::GetPropertyRequest(const GetPropertyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPropertyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_id_){}
    , decltype(_impl_.property_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    _this->_impl_.device_id_.Set(from._internal_device_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.property_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_property_name().empty()) {
    _this->_impl_.property_name_.Set(from._internal_property_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.GetPropertyRequest)
}

inline void GetPropertyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_id_){}
    , decltype(_impl_.property_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.property_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPropertyRequest::~GetPropertyRequest() {
  // @@protoc_insertion_point(destructor:lightspeed.request.GetPropertyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPropertyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_id_.Destroy();
  _impl_.property_name_.Destroy();
}

void GetPropertyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPropertyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.request.GetPropertyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_id_.ClearToEmpty();
  _impl_.property_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPropertyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.GetPropertyRequest.device_id"));
        } else
          goto handle_unusual;
        continue;
      // string property_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_property_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.GetPropertyRequest.property_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPropertyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.request.GetPropertyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.GetPropertyRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string property_name = 2;
  if (!this->_internal_property_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_property_name().data(), static_cast<int>(this->_internal_property_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.GetPropertyRequest.property_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_property_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.request.GetPropertyRequest)
  return target;
}

size_t GetPropertyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.request.GetPropertyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string property_name = 2;
  if (!this->_internal_property_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPropertyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPropertyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPropertyRequest::GetClassData() const { return &_class_data_; }


void GetPropertyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPropertyRequest*>(&to_msg);
  auto& from = static_cast<const GetPropertyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.request.GetPropertyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_property_name().empty()) {
    _this->_internal_set_property_name(from._internal_property_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPropertyRequest::CopyFrom(const GetPropertyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.request.GetPropertyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropertyRequest::IsInitialized() const {
  return true;
}

void GetPropertyRequest::InternalSwap(GetPropertyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_id_, lhs_arena,
      &other->_impl_.device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_name_, lhs_arena,
      &other->_impl_.property_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPropertyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[3]);
}

// ===================================================================

class SetPropertyRequest::_Internal {
 public:
};

SetPropertyRequest::SetPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.SetPropertyRequest)
}
SetPropertyRequest::SetPropertyRequest(const SetPropertyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetPropertyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_id_){}
    , decltype(_impl_.property_name_){}
    , decltype(_impl_.property_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    _this->_impl_.device_id_.Set(from._internal_device_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.property_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_property_name().empty()) {
    _this->_impl_.property_name_.Set(from._internal_property_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.property_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_property_value().empty()) {
    _this->_impl_.property_value_.Set(from._internal_property_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.SetPropertyRequest)
}

inline void SetPropertyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_id_){}
    , decltype(_impl_.property_name_){}
    , decltype(_impl_.property_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.property_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.property_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetPropertyRequest::~SetPropertyRequest() {
  // @@protoc_insertion_point(destructor:lightspeed.request.SetPropertyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPropertyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_id_.Destroy();
  _impl_.property_name_.Destroy();
  _impl_.property_value_.Destroy();
}

void SetPropertyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetPropertyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.request.SetPropertyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_id_.ClearToEmpty();
  _impl_.property_name_.ClearToEmpty();
  _impl_.property_value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPropertyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.SetPropertyRequest.device_id"));
        } else
          goto handle_unusual;
        continue;
      // string property_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_property_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.SetPropertyRequest.property_name"));
        } else
          goto handle_unusual;
        continue;
      // string property_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.SetPropertyRequest.property_value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPropertyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.request.SetPropertyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.SetPropertyRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string property_name = 2;
  if (!this->_internal_property_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_property_name().data(), static_cast<int>(this->_internal_property_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.SetPropertyRequest.property_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_property_name(), target);
  }

  // string property_value = 3;
  if (!this->_internal_property_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_property_value().data(), static_cast<int>(this->_internal_property_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.SetPropertyRequest.property_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.request.SetPropertyRequest)
  return target;
}

size_t SetPropertyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.request.SetPropertyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string property_name = 2;
  if (!this->_internal_property_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property_name());
  }

  // string property_value = 3;
  if (!this->_internal_property_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPropertyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetPropertyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPropertyRequest::GetClassData() const { return &_class_data_; }


void SetPropertyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetPropertyRequest*>(&to_msg);
  auto& from = static_cast<const SetPropertyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.request.SetPropertyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_property_name().empty()) {
    _this->_internal_set_property_name(from._internal_property_name());
  }
  if (!from._internal_property_value().empty()) {
    _this->_internal_set_property_value(from._internal_property_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPropertyRequest::CopyFrom(const SetPropertyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.request.SetPropertyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPropertyRequest::IsInitialized() const {
  return true;
}

void SetPropertyRequest::InternalSwap(SetPropertyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_id_, lhs_arena,
      &other->_impl_.device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_name_, lhs_arena,
      &other->_impl_.property_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_value_, lhs_arena,
      &other->_impl_.property_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPropertyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[4]);
}

// ===================================================================

class PropertyRequest::_Internal {
 public:
  static const ::lightspeed::request::GetPropertyRequest& property(const PropertyRequest* msg);
  static const ::lightspeed::request::GetPropertiesRequest& properties(const PropertyRequest* msg);
};

const ::lightspeed::request::GetPropertyRequest&
PropertyRequest::_Internal::property(const PropertyRequest* msg) {
  return *msg->_impl_.ask_.property_;
}
const ::lightspeed::request::GetPropertiesRequest&
PropertyRequest::_Internal::properties(const PropertyRequest* msg) {
  return *msg->_impl_.ask_.properties_;
}
void PropertyRequest::set_allocated_property(::lightspeed::request::GetPropertyRequest* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ask();
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(property);
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    set_has_property();
    _impl_.ask_.property_ = property;
  }
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.PropertyRequest.property)
}
void PropertyRequest::set_allocated_properties(::lightspeed::request::GetPropertiesRequest* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ask();
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(properties);
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    set_has_properties();
    _impl_.ask_.properties_ = properties;
  }
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.PropertyRequest.properties)
}
PropertyRequest::PropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.PropertyRequest)
}
PropertyRequest::PropertyRequest(const PropertyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ask_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ask();
  switch (from.ask_case()) {
    case kProperty: {
      _this->_internal_mutable_property()->::lightspeed::request::GetPropertyRequest::MergeFrom(
          from._internal_property());
      break;
    }
    case kProperties: {
      _this->_internal_mutable_properties()->::lightspeed::request::GetPropertiesRequest::MergeFrom(
          from._internal_properties());
      break;
    }
    case ASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.PropertyRequest)
}

inline void PropertyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ask_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_ask();
}

PropertyRequest::~PropertyRequest() {
  // @@protoc_insertion_point(destructor:lightspeed.request.PropertyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ask()) {
    clear_ask();
  }
}

void PropertyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertyRequest::clear_ask() {
// @@protoc_insertion_point(one_of_clear_start:lightspeed.request.PropertyRequest)
  switch (ask_case()) {
    case kProperty: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ask_.property_;
      }
      break;
    }
    case kProperties: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ask_.properties_;
      }
      break;
    }
    case ASK_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ASK_NOT_SET;
}


void PropertyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.request.PropertyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ask();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lightspeed.request.GetPropertyRequest property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .lightspeed.request.GetPropertiesRequest properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.request.PropertyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightspeed.request.GetPropertyRequest property = 1;
  if (_internal_has_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::property(this),
        _Internal::property(this).GetCachedSize(), target, stream);
  }

  // .lightspeed.request.GetPropertiesRequest properties = 2;
  if (_internal_has_properties()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::properties(this),
        _Internal::properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.request.PropertyRequest)
  return target;
}

size_t PropertyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.request.PropertyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ask_case()) {
    // .lightspeed.request.GetPropertyRequest property = 1;
    case kProperty: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ask_.property_);
      break;
    }
    // .lightspeed.request.GetPropertiesRequest properties = 2;
    case kProperties: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ask_.properties_);
      break;
    }
    case ASK_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertyRequest::GetClassData() const { return &_class_data_; }


void PropertyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertyRequest*>(&to_msg);
  auto& from = static_cast<const PropertyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.request.PropertyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ask_case()) {
    case kProperty: {
      _this->_internal_mutable_property()->::lightspeed::request::GetPropertyRequest::MergeFrom(
          from._internal_property());
      break;
    }
    case kProperties: {
      _this->_internal_mutable_properties()->::lightspeed::request::GetPropertiesRequest::MergeFrom(
          from._internal_properties());
      break;
    }
    case ASK_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertyRequest::CopyFrom(const PropertyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.request.PropertyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyRequest::IsInitialized() const {
  return true;
}

void PropertyRequest::InternalSwap(PropertyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ask_, other->_impl_.ask_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[5]);
}

// ===================================================================

class CcdExposureRequest::_Internal {
 public:
};

CcdExposureRequest::CcdExposureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.CcdExposureRequest)
}
CcdExposureRequest::CcdExposureRequest(const CcdExposureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CcdExposureRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.lenght_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.lenght_ = from._impl_.lenght_;
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.CcdExposureRequest)
}

inline void CcdExposureRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.lenght_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CcdExposureRequest::~CcdExposureRequest() {
  // @@protoc_insertion_point(destructor:lightspeed.request.CcdExposureRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CcdExposureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CcdExposureRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CcdExposureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.request.CcdExposureRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.lenght_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CcdExposureRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.CcdExposureRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // float lenght = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.lenght_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CcdExposureRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.request.CcdExposureRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.CcdExposureRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // float lenght = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lenght = this->_internal_lenght();
  uint32_t raw_lenght;
  memcpy(&raw_lenght, &tmp_lenght, sizeof(tmp_lenght));
  if (raw_lenght != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_lenght(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.request.CcdExposureRequest)
  return target;
}

size_t CcdExposureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.request.CcdExposureRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // float lenght = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lenght = this->_internal_lenght();
  uint32_t raw_lenght;
  memcpy(&raw_lenght, &tmp_lenght, sizeof(tmp_lenght));
  if (raw_lenght != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CcdExposureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CcdExposureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CcdExposureRequest::GetClassData() const { return &_class_data_; }


void CcdExposureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CcdExposureRequest*>(&to_msg);
  auto& from = static_cast<const CcdExposureRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.request.CcdExposureRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lenght = from._internal_lenght();
  uint32_t raw_lenght;
  memcpy(&raw_lenght, &tmp_lenght, sizeof(tmp_lenght));
  if (raw_lenght != 0) {
    _this->_internal_set_lenght(from._internal_lenght());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CcdExposureRequest::CopyFrom(const CcdExposureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.request.CcdExposureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CcdExposureRequest::IsInitialized() const {
  return true;
}

void CcdExposureRequest::InternalSwap(CcdExposureRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.lenght_, other->_impl_.lenght_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CcdExposureRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[6]);
}

// ===================================================================

class CcdExposureResponse::_Internal {
 public:
};

CcdExposureResponse::CcdExposureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.CcdExposureResponse)
}
CcdExposureResponse::CcdExposureResponse(const CcdExposureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CcdExposureResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.CcdExposureResponse)
}

inline void CcdExposureResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CcdExposureResponse::~CcdExposureResponse() {
  // @@protoc_insertion_point(destructor:lightspeed.request.CcdExposureResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CcdExposureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CcdExposureResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CcdExposureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.request.CcdExposureResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CcdExposureResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CcdExposureResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.request.CcdExposureResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.request.CcdExposureResponse)
  return target;
}

size_t CcdExposureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.request.CcdExposureResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CcdExposureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CcdExposureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CcdExposureResponse::GetClassData() const { return &_class_data_; }


void CcdExposureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CcdExposureResponse*>(&to_msg);
  auto& from = static_cast<const CcdExposureResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.request.CcdExposureResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CcdExposureResponse::CopyFrom(const CcdExposureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.request.CcdExposureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CcdExposureResponse::IsInitialized() const {
  return true;
}

void CcdExposureResponse::InternalSwap(CcdExposureResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CcdExposureResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[7]);
}

// ===================================================================

class CcdAbortExposureRequest::_Internal {
 public:
};

CcdAbortExposureRequest::CcdAbortExposureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.CcdAbortExposureRequest)
}
CcdAbortExposureRequest::CcdAbortExposureRequest(const CcdAbortExposureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CcdAbortExposureRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.CcdAbortExposureRequest)
}

inline void CcdAbortExposureRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CcdAbortExposureRequest::~CcdAbortExposureRequest() {
  // @@protoc_insertion_point(destructor:lightspeed.request.CcdAbortExposureRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CcdAbortExposureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CcdAbortExposureRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CcdAbortExposureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.request.CcdAbortExposureRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CcdAbortExposureRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.CcdAbortExposureRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CcdAbortExposureRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.request.CcdAbortExposureRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.CcdAbortExposureRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.request.CcdAbortExposureRequest)
  return target;
}

size_t CcdAbortExposureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.request.CcdAbortExposureRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CcdAbortExposureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CcdAbortExposureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CcdAbortExposureRequest::GetClassData() const { return &_class_data_; }


void CcdAbortExposureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CcdAbortExposureRequest*>(&to_msg);
  auto& from = static_cast<const CcdAbortExposureRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.request.CcdAbortExposureRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CcdAbortExposureRequest::CopyFrom(const CcdAbortExposureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.request.CcdAbortExposureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CcdAbortExposureRequest::IsInitialized() const {
  return true;
}

void CcdAbortExposureRequest::InternalSwap(CcdAbortExposureRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CcdAbortExposureRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[8]);
}

// ===================================================================

class CcdAbortExposureResponse::_Internal {
 public:
};

CcdAbortExposureResponse::CcdAbortExposureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.CcdAbortExposureResponse)
}
CcdAbortExposureResponse::CcdAbortExposureResponse(const CcdAbortExposureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CcdAbortExposureResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.CcdAbortExposureResponse)
}

inline void CcdAbortExposureResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CcdAbortExposureResponse::~CcdAbortExposureResponse() {
  // @@protoc_insertion_point(destructor:lightspeed.request.CcdAbortExposureResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CcdAbortExposureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void CcdAbortExposureResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CcdAbortExposureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.request.CcdAbortExposureResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CcdAbortExposureResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.CcdAbortExposureResponse.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CcdAbortExposureResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.request.CcdAbortExposureResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.CcdAbortExposureResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.request.CcdAbortExposureResponse)
  return target;
}

size_t CcdAbortExposureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.request.CcdAbortExposureResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CcdAbortExposureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CcdAbortExposureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CcdAbortExposureResponse::GetClassData() const { return &_class_data_; }


void CcdAbortExposureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CcdAbortExposureResponse*>(&to_msg);
  auto& from = static_cast<const CcdAbortExposureResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.request.CcdAbortExposureResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CcdAbortExposureResponse::CopyFrom(const CcdAbortExposureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.request.CcdAbortExposureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CcdAbortExposureResponse::IsInitialized() const {
  return true;
}

void CcdAbortExposureResponse::InternalSwap(CcdAbortExposureResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CcdAbortExposureResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[9]);
}

// ===================================================================

class EfwCalibrationRequest::_Internal {
 public:
};

EfwCalibrationRequest::EfwCalibrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.request.EfwCalibrationRequest)
}
EfwCalibrationRequest::EfwCalibrationRequest(const EfwCalibrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EfwCalibrationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.request.EfwCalibrationRequest)
}

inline void EfwCalibrationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EfwCalibrationRequest::~EfwCalibrationRequest() {
  // @@protoc_insertion_point(destructor:lightspeed.request.EfwCalibrationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EfwCalibrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void EfwCalibrationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EfwCalibrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.request.EfwCalibrationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EfwCalibrationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.request.EfwCalibrationRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EfwCalibrationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.request.EfwCalibrationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.request.EfwCalibrationRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.request.EfwCalibrationRequest)
  return target;
}

size_t EfwCalibrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.request.EfwCalibrationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EfwCalibrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EfwCalibrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EfwCalibrationRequest::GetClassData() const { return &_class_data_; }


void EfwCalibrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EfwCalibrationRequest*>(&to_msg);
  auto& from = static_cast<const EfwCalibrationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.request.EfwCalibrationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EfwCalibrationRequest::CopyFrom(const EfwCalibrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.request.EfwCalibrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EfwCalibrationRequest::IsInitialized() const {
  return true;
}

void EfwCalibrationRequest::InternalSwap(EfwCalibrationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EfwCalibrationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_requests_2frequest_2eproto_getter, &descriptor_table_requests_2frequest_2eproto_once,
      file_level_metadata_requests_2frequest_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace request
}  // namespace lightspeed
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lightspeed::request::GetDevicesRequest*
Arena::CreateMaybeMessage< ::lightspeed::request::GetDevicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::GetDevicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::request::GetDeviceRequest*
Arena::CreateMaybeMessage< ::lightspeed::request::GetDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::GetDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::request::GetPropertiesRequest*
Arena::CreateMaybeMessage< ::lightspeed::request::GetPropertiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::GetPropertiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::request::GetPropertyRequest*
Arena::CreateMaybeMessage< ::lightspeed::request::GetPropertyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::GetPropertyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::request::SetPropertyRequest*
Arena::CreateMaybeMessage< ::lightspeed::request::SetPropertyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::SetPropertyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::request::PropertyRequest*
Arena::CreateMaybeMessage< ::lightspeed::request::PropertyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::PropertyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::request::CcdExposureRequest*
Arena::CreateMaybeMessage< ::lightspeed::request::CcdExposureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::CcdExposureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::request::CcdExposureResponse*
Arena::CreateMaybeMessage< ::lightspeed::request::CcdExposureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::CcdExposureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::request::CcdAbortExposureRequest*
Arena::CreateMaybeMessage< ::lightspeed::request::CcdAbortExposureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::CcdAbortExposureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::request::CcdAbortExposureResponse*
Arena::CreateMaybeMessage< ::lightspeed::request::CcdAbortExposureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::CcdAbortExposureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::request::EfwCalibrationRequest*
Arena::CreateMaybeMessage< ::lightspeed::request::EfwCalibrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::request::EfwCalibrationRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

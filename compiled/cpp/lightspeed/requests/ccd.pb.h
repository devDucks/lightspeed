// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: requests/ccd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_requests_2fccd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_requests_2fccd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_requests_2fccd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_requests_2fccd_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_requests_2fccd_2eproto;
namespace lightspeed {
namespace request {
namespace ccd {
class CcdAbortExposureRequest;
struct CcdAbortExposureRequestDefaultTypeInternal;
extern CcdAbortExposureRequestDefaultTypeInternal _CcdAbortExposureRequest_default_instance_;
class CcdAbortExposureResponse;
struct CcdAbortExposureResponseDefaultTypeInternal;
extern CcdAbortExposureResponseDefaultTypeInternal _CcdAbortExposureResponse_default_instance_;
class CcdExposureRequest;
struct CcdExposureRequestDefaultTypeInternal;
extern CcdExposureRequestDefaultTypeInternal _CcdExposureRequest_default_instance_;
class CcdExposureResponse;
struct CcdExposureResponseDefaultTypeInternal;
extern CcdExposureResponseDefaultTypeInternal _CcdExposureResponse_default_instance_;
}  // namespace ccd
}  // namespace request
}  // namespace lightspeed
PROTOBUF_NAMESPACE_OPEN
template<> ::lightspeed::request::ccd::CcdAbortExposureRequest* Arena::CreateMaybeMessage<::lightspeed::request::ccd::CcdAbortExposureRequest>(Arena*);
template<> ::lightspeed::request::ccd::CcdAbortExposureResponse* Arena::CreateMaybeMessage<::lightspeed::request::ccd::CcdAbortExposureResponse>(Arena*);
template<> ::lightspeed::request::ccd::CcdExposureRequest* Arena::CreateMaybeMessage<::lightspeed::request::ccd::CcdExposureRequest>(Arena*);
template<> ::lightspeed::request::ccd::CcdExposureResponse* Arena::CreateMaybeMessage<::lightspeed::request::ccd::CcdExposureResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lightspeed {
namespace request {
namespace ccd {

// ===================================================================

class CcdExposureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.ccd.CcdExposureRequest) */ {
 public:
  inline CcdExposureRequest() : CcdExposureRequest(nullptr) {}
  ~CcdExposureRequest() override;
  explicit PROTOBUF_CONSTEXPR CcdExposureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CcdExposureRequest(const CcdExposureRequest& from);
  CcdExposureRequest(CcdExposureRequest&& from) noexcept
    : CcdExposureRequest() {
    *this = ::std::move(from);
  }

  inline CcdExposureRequest& operator=(const CcdExposureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CcdExposureRequest& operator=(CcdExposureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CcdExposureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CcdExposureRequest* internal_default_instance() {
    return reinterpret_cast<const CcdExposureRequest*>(
               &_CcdExposureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CcdExposureRequest& a, CcdExposureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CcdExposureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CcdExposureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CcdExposureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CcdExposureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CcdExposureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CcdExposureRequest& from) {
    CcdExposureRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CcdExposureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.ccd.CcdExposureRequest";
  }
  protected:
  explicit CcdExposureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLenghtFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // float lenght = 2;
  void clear_lenght();
  float lenght() const;
  void set_lenght(float value);
  private:
  float _internal_lenght() const;
  void _internal_set_lenght(float value);
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.ccd.CcdExposureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    float lenght_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2fccd_2eproto;
};
// -------------------------------------------------------------------

class CcdExposureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.ccd.CcdExposureResponse) */ {
 public:
  inline CcdExposureResponse() : CcdExposureResponse(nullptr) {}
  ~CcdExposureResponse() override;
  explicit PROTOBUF_CONSTEXPR CcdExposureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CcdExposureResponse(const CcdExposureResponse& from);
  CcdExposureResponse(CcdExposureResponse&& from) noexcept
    : CcdExposureResponse() {
    *this = ::std::move(from);
  }

  inline CcdExposureResponse& operator=(const CcdExposureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CcdExposureResponse& operator=(CcdExposureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CcdExposureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CcdExposureResponse* internal_default_instance() {
    return reinterpret_cast<const CcdExposureResponse*>(
               &_CcdExposureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CcdExposureResponse& a, CcdExposureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CcdExposureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CcdExposureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CcdExposureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CcdExposureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CcdExposureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CcdExposureResponse& from) {
    CcdExposureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CcdExposureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.ccd.CcdExposureResponse";
  }
  protected:
  explicit CcdExposureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.ccd.CcdExposureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2fccd_2eproto;
};
// -------------------------------------------------------------------

class CcdAbortExposureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.ccd.CcdAbortExposureRequest) */ {
 public:
  inline CcdAbortExposureRequest() : CcdAbortExposureRequest(nullptr) {}
  ~CcdAbortExposureRequest() override;
  explicit PROTOBUF_CONSTEXPR CcdAbortExposureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CcdAbortExposureRequest(const CcdAbortExposureRequest& from);
  CcdAbortExposureRequest(CcdAbortExposureRequest&& from) noexcept
    : CcdAbortExposureRequest() {
    *this = ::std::move(from);
  }

  inline CcdAbortExposureRequest& operator=(const CcdAbortExposureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CcdAbortExposureRequest& operator=(CcdAbortExposureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CcdAbortExposureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CcdAbortExposureRequest* internal_default_instance() {
    return reinterpret_cast<const CcdAbortExposureRequest*>(
               &_CcdAbortExposureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CcdAbortExposureRequest& a, CcdAbortExposureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CcdAbortExposureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CcdAbortExposureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CcdAbortExposureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CcdAbortExposureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CcdAbortExposureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CcdAbortExposureRequest& from) {
    CcdAbortExposureRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CcdAbortExposureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.ccd.CcdAbortExposureRequest";
  }
  protected:
  explicit CcdAbortExposureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.ccd.CcdAbortExposureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2fccd_2eproto;
};
// -------------------------------------------------------------------

class CcdAbortExposureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.request.ccd.CcdAbortExposureResponse) */ {
 public:
  inline CcdAbortExposureResponse() : CcdAbortExposureResponse(nullptr) {}
  ~CcdAbortExposureResponse() override;
  explicit PROTOBUF_CONSTEXPR CcdAbortExposureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CcdAbortExposureResponse(const CcdAbortExposureResponse& from);
  CcdAbortExposureResponse(CcdAbortExposureResponse&& from) noexcept
    : CcdAbortExposureResponse() {
    *this = ::std::move(from);
  }

  inline CcdAbortExposureResponse& operator=(const CcdAbortExposureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CcdAbortExposureResponse& operator=(CcdAbortExposureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CcdAbortExposureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CcdAbortExposureResponse* internal_default_instance() {
    return reinterpret_cast<const CcdAbortExposureResponse*>(
               &_CcdAbortExposureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CcdAbortExposureResponse& a, CcdAbortExposureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CcdAbortExposureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CcdAbortExposureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CcdAbortExposureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CcdAbortExposureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CcdAbortExposureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CcdAbortExposureResponse& from) {
    CcdAbortExposureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CcdAbortExposureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.request.ccd.CcdAbortExposureResponse";
  }
  protected:
  explicit CcdAbortExposureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.request.ccd.CcdAbortExposureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_requests_2fccd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CcdExposureRequest

// string id = 1;
inline void CcdExposureRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CcdExposureRequest::id() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.ccd.CcdExposureRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CcdExposureRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.ccd.CcdExposureRequest.id)
}
inline std::string* CcdExposureRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.ccd.CcdExposureRequest.id)
  return _s;
}
inline const std::string& CcdExposureRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CcdExposureRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CcdExposureRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CcdExposureRequest::release_id() {
  // @@protoc_insertion_point(field_release:lightspeed.request.ccd.CcdExposureRequest.id)
  return _impl_.id_.Release();
}
inline void CcdExposureRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.ccd.CcdExposureRequest.id)
}

// float lenght = 2;
inline void CcdExposureRequest::clear_lenght() {
  _impl_.lenght_ = 0;
}
inline float CcdExposureRequest::_internal_lenght() const {
  return _impl_.lenght_;
}
inline float CcdExposureRequest::lenght() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.ccd.CcdExposureRequest.lenght)
  return _internal_lenght();
}
inline void CcdExposureRequest::_internal_set_lenght(float value) {
  
  _impl_.lenght_ = value;
}
inline void CcdExposureRequest::set_lenght(float value) {
  _internal_set_lenght(value);
  // @@protoc_insertion_point(field_set:lightspeed.request.ccd.CcdExposureRequest.lenght)
}

// -------------------------------------------------------------------

// CcdExposureResponse

// bytes data = 1;
inline void CcdExposureResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& CcdExposureResponse::data() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.ccd.CcdExposureResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CcdExposureResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.ccd.CcdExposureResponse.data)
}
inline std::string* CcdExposureResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.ccd.CcdExposureResponse.data)
  return _s;
}
inline const std::string& CcdExposureResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CcdExposureResponse::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CcdExposureResponse::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CcdExposureResponse::release_data() {
  // @@protoc_insertion_point(field_release:lightspeed.request.ccd.CcdExposureResponse.data)
  return _impl_.data_.Release();
}
inline void CcdExposureResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.ccd.CcdExposureResponse.data)
}

// -------------------------------------------------------------------

// CcdAbortExposureRequest

// string id = 1;
inline void CcdAbortExposureRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CcdAbortExposureRequest::id() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.ccd.CcdAbortExposureRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CcdAbortExposureRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.ccd.CcdAbortExposureRequest.id)
}
inline std::string* CcdAbortExposureRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.ccd.CcdAbortExposureRequest.id)
  return _s;
}
inline const std::string& CcdAbortExposureRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CcdAbortExposureRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CcdAbortExposureRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CcdAbortExposureRequest::release_id() {
  // @@protoc_insertion_point(field_release:lightspeed.request.ccd.CcdAbortExposureRequest.id)
  return _impl_.id_.Release();
}
inline void CcdAbortExposureRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.ccd.CcdAbortExposureRequest.id)
}

// -------------------------------------------------------------------

// CcdAbortExposureResponse

// string status = 1;
inline void CcdAbortExposureResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& CcdAbortExposureResponse::status() const {
  // @@protoc_insertion_point(field_get:lightspeed.request.ccd.CcdAbortExposureResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CcdAbortExposureResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.request.ccd.CcdAbortExposureResponse.status)
}
inline std::string* CcdAbortExposureResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:lightspeed.request.ccd.CcdAbortExposureResponse.status)
  return _s;
}
inline const std::string& CcdAbortExposureResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void CcdAbortExposureResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* CcdAbortExposureResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* CcdAbortExposureResponse::release_status() {
  // @@protoc_insertion_point(field_release:lightspeed.request.ccd.CcdAbortExposureResponse.status)
  return _impl_.status_.Release();
}
inline void CcdAbortExposureResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.request.ccd.CcdAbortExposureResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ccd
}  // namespace request
}  // namespace lightspeed

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_requests_2fccd_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: responses/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_responses_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_responses_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "properties/props.pb.h"
#include "devices/device.pb.h"
#include "devices/actions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_responses_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_responses_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_responses_2fresponse_2eproto;
namespace lightspeed {
namespace response {
class EfwCalibrationResponse;
struct EfwCalibrationResponseDefaultTypeInternal;
extern EfwCalibrationResponseDefaultTypeInternal _EfwCalibrationResponse_default_instance_;
class GetDeviceResponse;
struct GetDeviceResponseDefaultTypeInternal;
extern GetDeviceResponseDefaultTypeInternal _GetDeviceResponse_default_instance_;
class GetDevicesResponse;
struct GetDevicesResponseDefaultTypeInternal;
extern GetDevicesResponseDefaultTypeInternal _GetDevicesResponse_default_instance_;
class GetPropertiesResponse;
struct GetPropertiesResponseDefaultTypeInternal;
extern GetPropertiesResponseDefaultTypeInternal _GetPropertiesResponse_default_instance_;
class GetSerialDeviceResponse;
struct GetSerialDeviceResponseDefaultTypeInternal;
extern GetSerialDeviceResponseDefaultTypeInternal _GetSerialDeviceResponse_default_instance_;
class GetSerialDevicesResponse;
struct GetSerialDevicesResponseDefaultTypeInternal;
extern GetSerialDevicesResponseDefaultTypeInternal _GetSerialDevicesResponse_default_instance_;
class SetPropertyResponse;
struct SetPropertyResponseDefaultTypeInternal;
extern SetPropertyResponseDefaultTypeInternal _SetPropertyResponse_default_instance_;
}  // namespace response
}  // namespace lightspeed
PROTOBUF_NAMESPACE_OPEN
template<> ::lightspeed::response::EfwCalibrationResponse* Arena::CreateMaybeMessage<::lightspeed::response::EfwCalibrationResponse>(Arena*);
template<> ::lightspeed::response::GetDeviceResponse* Arena::CreateMaybeMessage<::lightspeed::response::GetDeviceResponse>(Arena*);
template<> ::lightspeed::response::GetDevicesResponse* Arena::CreateMaybeMessage<::lightspeed::response::GetDevicesResponse>(Arena*);
template<> ::lightspeed::response::GetPropertiesResponse* Arena::CreateMaybeMessage<::lightspeed::response::GetPropertiesResponse>(Arena*);
template<> ::lightspeed::response::GetSerialDeviceResponse* Arena::CreateMaybeMessage<::lightspeed::response::GetSerialDeviceResponse>(Arena*);
template<> ::lightspeed::response::GetSerialDevicesResponse* Arena::CreateMaybeMessage<::lightspeed::response::GetSerialDevicesResponse>(Arena*);
template<> ::lightspeed::response::SetPropertyResponse* Arena::CreateMaybeMessage<::lightspeed::response::SetPropertyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lightspeed {
namespace response {

// ===================================================================

class GetPropertiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.response.GetPropertiesResponse) */ {
 public:
  inline GetPropertiesResponse() : GetPropertiesResponse(nullptr) {}
  ~GetPropertiesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPropertiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPropertiesResponse(const GetPropertiesResponse& from);
  GetPropertiesResponse(GetPropertiesResponse&& from) noexcept
    : GetPropertiesResponse() {
    *this = ::std::move(from);
  }

  inline GetPropertiesResponse& operator=(const GetPropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesResponse& operator=(GetPropertiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesResponse*>(
               &_GetPropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetPropertiesResponse& a, GetPropertiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPropertiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPropertiesResponse& from) {
    GetPropertiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPropertiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.response.GetPropertiesResponse";
  }
  protected:
  explicit GetPropertiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kDeviceNameFieldNumber = 1,
  };
  // repeated .lightspeed.props.Property properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::lightspeed::props::Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >*
      mutable_properties();
  private:
  const ::lightspeed::props::Property& _internal_properties(int index) const;
  ::lightspeed::props::Property* _internal_add_properties();
  public:
  const ::lightspeed::props::Property& properties(int index) const;
  ::lightspeed::props::Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >&
      properties() const;

  // string device_name = 1;
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.response.GetPropertiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property > properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_responses_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.response.GetDeviceResponse) */ {
 public:
  inline GetDeviceResponse() : GetDeviceResponse(nullptr) {}
  ~GetDeviceResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceResponse(const GetDeviceResponse& from);
  GetDeviceResponse(GetDeviceResponse&& from) noexcept
    : GetDeviceResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceResponse& operator=(const GetDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceResponse& operator=(GetDeviceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceResponse*>(
               &_GetDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetDeviceResponse& a, GetDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDeviceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDeviceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDeviceResponse& from) {
    GetDeviceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.response.GetDeviceResponse";
  }
  protected:
  explicit GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .lightspeed.devices.AstroDevice device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::lightspeed::devices::AstroDevice& device() const;
  PROTOBUF_NODISCARD ::lightspeed::devices::AstroDevice* release_device();
  ::lightspeed::devices::AstroDevice* mutable_device();
  void set_allocated_device(::lightspeed::devices::AstroDevice* device);
  private:
  const ::lightspeed::devices::AstroDevice& _internal_device() const;
  ::lightspeed::devices::AstroDevice* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::lightspeed::devices::AstroDevice* device);
  ::lightspeed::devices::AstroDevice* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:lightspeed.response.GetDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::lightspeed::devices::AstroDevice* device_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_responses_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class GetDevicesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.response.GetDevicesResponse) */ {
 public:
  inline GetDevicesResponse() : GetDevicesResponse(nullptr) {}
  ~GetDevicesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDevicesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDevicesResponse(const GetDevicesResponse& from);
  GetDevicesResponse(GetDevicesResponse&& from) noexcept
    : GetDevicesResponse() {
    *this = ::std::move(from);
  }

  inline GetDevicesResponse& operator=(const GetDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevicesResponse& operator=(GetDevicesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDevicesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const GetDevicesResponse*>(
               &_GetDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDevicesResponse& a, GetDevicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevicesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDevicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDevicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDevicesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDevicesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDevicesResponse& from) {
    GetDevicesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDevicesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.response.GetDevicesResponse";
  }
  protected:
  explicit GetDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .lightspeed.devices.AstroDevice devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::lightspeed::devices::AstroDevice* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::devices::AstroDevice >*
      mutable_devices();
  private:
  const ::lightspeed::devices::AstroDevice& _internal_devices(int index) const;
  ::lightspeed::devices::AstroDevice* _internal_add_devices();
  public:
  const ::lightspeed::devices::AstroDevice& devices(int index) const;
  ::lightspeed::devices::AstroDevice* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::devices::AstroDevice >&
      devices() const;

  // @@protoc_insertion_point(class_scope:lightspeed.response.GetDevicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::devices::AstroDevice > devices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_responses_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class GetSerialDeviceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.response.GetSerialDeviceResponse) */ {
 public:
  inline GetSerialDeviceResponse() : GetSerialDeviceResponse(nullptr) {}
  ~GetSerialDeviceResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSerialDeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSerialDeviceResponse(const GetSerialDeviceResponse& from);
  GetSerialDeviceResponse(GetSerialDeviceResponse&& from) noexcept
    : GetSerialDeviceResponse() {
    *this = ::std::move(from);
  }

  inline GetSerialDeviceResponse& operator=(const GetSerialDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSerialDeviceResponse& operator=(GetSerialDeviceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSerialDeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSerialDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const GetSerialDeviceResponse*>(
               &_GetSerialDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetSerialDeviceResponse& a, GetSerialDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSerialDeviceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSerialDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSerialDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSerialDeviceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSerialDeviceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSerialDeviceResponse& from) {
    GetSerialDeviceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSerialDeviceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.response.GetSerialDeviceResponse";
  }
  protected:
  explicit GetSerialDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .lightspeed.devices.AstroSerialDevice device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::lightspeed::devices::AstroSerialDevice& device() const;
  PROTOBUF_NODISCARD ::lightspeed::devices::AstroSerialDevice* release_device();
  ::lightspeed::devices::AstroSerialDevice* mutable_device();
  void set_allocated_device(::lightspeed::devices::AstroSerialDevice* device);
  private:
  const ::lightspeed::devices::AstroSerialDevice& _internal_device() const;
  ::lightspeed::devices::AstroSerialDevice* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::lightspeed::devices::AstroSerialDevice* device);
  ::lightspeed::devices::AstroSerialDevice* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:lightspeed.response.GetSerialDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::lightspeed::devices::AstroSerialDevice* device_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_responses_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class GetSerialDevicesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.response.GetSerialDevicesResponse) */ {
 public:
  inline GetSerialDevicesResponse() : GetSerialDevicesResponse(nullptr) {}
  ~GetSerialDevicesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSerialDevicesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSerialDevicesResponse(const GetSerialDevicesResponse& from);
  GetSerialDevicesResponse(GetSerialDevicesResponse&& from) noexcept
    : GetSerialDevicesResponse() {
    *this = ::std::move(from);
  }

  inline GetSerialDevicesResponse& operator=(const GetSerialDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSerialDevicesResponse& operator=(GetSerialDevicesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSerialDevicesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSerialDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const GetSerialDevicesResponse*>(
               &_GetSerialDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetSerialDevicesResponse& a, GetSerialDevicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSerialDevicesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSerialDevicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSerialDevicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSerialDevicesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSerialDevicesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSerialDevicesResponse& from) {
    GetSerialDevicesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSerialDevicesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.response.GetSerialDevicesResponse";
  }
  protected:
  explicit GetSerialDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .lightspeed.devices.AstroSerialDevice devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::lightspeed::devices::AstroSerialDevice* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::devices::AstroSerialDevice >*
      mutable_devices();
  private:
  const ::lightspeed::devices::AstroSerialDevice& _internal_devices(int index) const;
  ::lightspeed::devices::AstroSerialDevice* _internal_add_devices();
  public:
  const ::lightspeed::devices::AstroSerialDevice& devices(int index) const;
  ::lightspeed::devices::AstroSerialDevice* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::devices::AstroSerialDevice >&
      devices() const;

  // @@protoc_insertion_point(class_scope:lightspeed.response.GetSerialDevicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::devices::AstroSerialDevice > devices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_responses_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class EfwCalibrationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.response.EfwCalibrationResponse) */ {
 public:
  inline EfwCalibrationResponse() : EfwCalibrationResponse(nullptr) {}
  ~EfwCalibrationResponse() override;
  explicit PROTOBUF_CONSTEXPR EfwCalibrationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EfwCalibrationResponse(const EfwCalibrationResponse& from);
  EfwCalibrationResponse(EfwCalibrationResponse&& from) noexcept
    : EfwCalibrationResponse() {
    *this = ::std::move(from);
  }

  inline EfwCalibrationResponse& operator=(const EfwCalibrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EfwCalibrationResponse& operator=(EfwCalibrationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EfwCalibrationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EfwCalibrationResponse* internal_default_instance() {
    return reinterpret_cast<const EfwCalibrationResponse*>(
               &_EfwCalibrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EfwCalibrationResponse& a, EfwCalibrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EfwCalibrationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EfwCalibrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EfwCalibrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EfwCalibrationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EfwCalibrationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EfwCalibrationResponse& from) {
    EfwCalibrationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EfwCalibrationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.response.EfwCalibrationResponse";
  }
  protected:
  explicit EfwCalibrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.response.EfwCalibrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_responses_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class SetPropertyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.response.SetPropertyResponse) */ {
 public:
  inline SetPropertyResponse() : SetPropertyResponse(nullptr) {}
  ~SetPropertyResponse() override;
  explicit PROTOBUF_CONSTEXPR SetPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPropertyResponse(const SetPropertyResponse& from);
  SetPropertyResponse(SetPropertyResponse&& from) noexcept
    : SetPropertyResponse() {
    *this = ::std::move(from);
  }

  inline SetPropertyResponse& operator=(const SetPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPropertyResponse& operator=(SetPropertyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const SetPropertyResponse*>(
               &_SetPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetPropertyResponse& a, SetPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPropertyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPropertyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPropertyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPropertyResponse& from) {
    SetPropertyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPropertyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.response.SetPropertyResponse";
  }
  protected:
  explicit SetPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .lightspeed.devices.actions.DeviceActions status = 1;
  void clear_status();
  ::lightspeed::devices::actions::DeviceActions status() const;
  void set_status(::lightspeed::devices::actions::DeviceActions value);
  private:
  ::lightspeed::devices::actions::DeviceActions _internal_status() const;
  void _internal_set_status(::lightspeed::devices::actions::DeviceActions value);
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.response.SetPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_responses_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetPropertiesResponse

// string device_name = 1;
inline void GetPropertiesResponse::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& GetPropertiesResponse::device_name() const {
  // @@protoc_insertion_point(field_get:lightspeed.response.GetPropertiesResponse.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPropertiesResponse::set_device_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.response.GetPropertiesResponse.device_name)
}
inline std::string* GetPropertiesResponse::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.response.GetPropertiesResponse.device_name)
  return _s;
}
inline const std::string& GetPropertiesResponse::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void GetPropertiesResponse::_internal_set_device_name(const std::string& value) {
  
  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPropertiesResponse::_internal_mutable_device_name() {
  
  return _impl_.device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPropertiesResponse::release_device_name() {
  // @@protoc_insertion_point(field_release:lightspeed.response.GetPropertiesResponse.device_name)
  return _impl_.device_name_.Release();
}
inline void GetPropertiesResponse::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  _impl_.device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.response.GetPropertiesResponse.device_name)
}

// repeated .lightspeed.props.Property properties = 2;
inline int GetPropertiesResponse::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int GetPropertiesResponse::properties_size() const {
  return _internal_properties_size();
}
inline ::lightspeed::props::Property* GetPropertiesResponse::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:lightspeed.response.GetPropertiesResponse.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >*
GetPropertiesResponse::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:lightspeed.response.GetPropertiesResponse.properties)
  return &_impl_.properties_;
}
inline const ::lightspeed::props::Property& GetPropertiesResponse::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::lightspeed::props::Property& GetPropertiesResponse::properties(int index) const {
  // @@protoc_insertion_point(field_get:lightspeed.response.GetPropertiesResponse.properties)
  return _internal_properties(index);
}
inline ::lightspeed::props::Property* GetPropertiesResponse::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::lightspeed::props::Property* GetPropertiesResponse::add_properties() {
  ::lightspeed::props::Property* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:lightspeed.response.GetPropertiesResponse.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >&
GetPropertiesResponse::properties() const {
  // @@protoc_insertion_point(field_list:lightspeed.response.GetPropertiesResponse.properties)
  return _impl_.properties_;
}

// -------------------------------------------------------------------

// GetDeviceResponse

// .lightspeed.devices.AstroDevice device = 1;
inline bool GetDeviceResponse::_internal_has_device() const {
  return this != internal_default_instance() && _impl_.device_ != nullptr;
}
inline bool GetDeviceResponse::has_device() const {
  return _internal_has_device();
}
inline const ::lightspeed::devices::AstroDevice& GetDeviceResponse::_internal_device() const {
  const ::lightspeed::devices::AstroDevice* p = _impl_.device_;
  return p != nullptr ? *p : reinterpret_cast<const ::lightspeed::devices::AstroDevice&>(
      ::lightspeed::devices::_AstroDevice_default_instance_);
}
inline const ::lightspeed::devices::AstroDevice& GetDeviceResponse::device() const {
  // @@protoc_insertion_point(field_get:lightspeed.response.GetDeviceResponse.device)
  return _internal_device();
}
inline void GetDeviceResponse::unsafe_arena_set_allocated_device(
    ::lightspeed::devices::AstroDevice* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  _impl_.device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lightspeed.response.GetDeviceResponse.device)
}
inline ::lightspeed::devices::AstroDevice* GetDeviceResponse::release_device() {
  
  ::lightspeed::devices::AstroDevice* temp = _impl_.device_;
  _impl_.device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lightspeed::devices::AstroDevice* GetDeviceResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:lightspeed.response.GetDeviceResponse.device)
  
  ::lightspeed::devices::AstroDevice* temp = _impl_.device_;
  _impl_.device_ = nullptr;
  return temp;
}
inline ::lightspeed::devices::AstroDevice* GetDeviceResponse::_internal_mutable_device() {
  
  if (_impl_.device_ == nullptr) {
    auto* p = CreateMaybeMessage<::lightspeed::devices::AstroDevice>(GetArenaForAllocation());
    _impl_.device_ = p;
  }
  return _impl_.device_;
}
inline ::lightspeed::devices::AstroDevice* GetDeviceResponse::mutable_device() {
  ::lightspeed::devices::AstroDevice* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:lightspeed.response.GetDeviceResponse.device)
  return _msg;
}
inline void GetDeviceResponse::set_allocated_device(::lightspeed::devices::AstroDevice* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.device_ = device;
  // @@protoc_insertion_point(field_set_allocated:lightspeed.response.GetDeviceResponse.device)
}

// -------------------------------------------------------------------

// GetDevicesResponse

// repeated .lightspeed.devices.AstroDevice devices = 1;
inline int GetDevicesResponse::_internal_devices_size() const {
  return _impl_.devices_.size();
}
inline int GetDevicesResponse::devices_size() const {
  return _internal_devices_size();
}
inline ::lightspeed::devices::AstroDevice* GetDevicesResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:lightspeed.response.GetDevicesResponse.devices)
  return _impl_.devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::devices::AstroDevice >*
GetDevicesResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:lightspeed.response.GetDevicesResponse.devices)
  return &_impl_.devices_;
}
inline const ::lightspeed::devices::AstroDevice& GetDevicesResponse::_internal_devices(int index) const {
  return _impl_.devices_.Get(index);
}
inline const ::lightspeed::devices::AstroDevice& GetDevicesResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:lightspeed.response.GetDevicesResponse.devices)
  return _internal_devices(index);
}
inline ::lightspeed::devices::AstroDevice* GetDevicesResponse::_internal_add_devices() {
  return _impl_.devices_.Add();
}
inline ::lightspeed::devices::AstroDevice* GetDevicesResponse::add_devices() {
  ::lightspeed::devices::AstroDevice* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:lightspeed.response.GetDevicesResponse.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::devices::AstroDevice >&
GetDevicesResponse::devices() const {
  // @@protoc_insertion_point(field_list:lightspeed.response.GetDevicesResponse.devices)
  return _impl_.devices_;
}

// -------------------------------------------------------------------

// GetSerialDeviceResponse

// .lightspeed.devices.AstroSerialDevice device = 1;
inline bool GetSerialDeviceResponse::_internal_has_device() const {
  return this != internal_default_instance() && _impl_.device_ != nullptr;
}
inline bool GetSerialDeviceResponse::has_device() const {
  return _internal_has_device();
}
inline const ::lightspeed::devices::AstroSerialDevice& GetSerialDeviceResponse::_internal_device() const {
  const ::lightspeed::devices::AstroSerialDevice* p = _impl_.device_;
  return p != nullptr ? *p : reinterpret_cast<const ::lightspeed::devices::AstroSerialDevice&>(
      ::lightspeed::devices::_AstroSerialDevice_default_instance_);
}
inline const ::lightspeed::devices::AstroSerialDevice& GetSerialDeviceResponse::device() const {
  // @@protoc_insertion_point(field_get:lightspeed.response.GetSerialDeviceResponse.device)
  return _internal_device();
}
inline void GetSerialDeviceResponse::unsafe_arena_set_allocated_device(
    ::lightspeed::devices::AstroSerialDevice* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  _impl_.device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lightspeed.response.GetSerialDeviceResponse.device)
}
inline ::lightspeed::devices::AstroSerialDevice* GetSerialDeviceResponse::release_device() {
  
  ::lightspeed::devices::AstroSerialDevice* temp = _impl_.device_;
  _impl_.device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lightspeed::devices::AstroSerialDevice* GetSerialDeviceResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:lightspeed.response.GetSerialDeviceResponse.device)
  
  ::lightspeed::devices::AstroSerialDevice* temp = _impl_.device_;
  _impl_.device_ = nullptr;
  return temp;
}
inline ::lightspeed::devices::AstroSerialDevice* GetSerialDeviceResponse::_internal_mutable_device() {
  
  if (_impl_.device_ == nullptr) {
    auto* p = CreateMaybeMessage<::lightspeed::devices::AstroSerialDevice>(GetArenaForAllocation());
    _impl_.device_ = p;
  }
  return _impl_.device_;
}
inline ::lightspeed::devices::AstroSerialDevice* GetSerialDeviceResponse::mutable_device() {
  ::lightspeed::devices::AstroSerialDevice* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:lightspeed.response.GetSerialDeviceResponse.device)
  return _msg;
}
inline void GetSerialDeviceResponse::set_allocated_device(::lightspeed::devices::AstroSerialDevice* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.device_ = device;
  // @@protoc_insertion_point(field_set_allocated:lightspeed.response.GetSerialDeviceResponse.device)
}

// -------------------------------------------------------------------

// GetSerialDevicesResponse

// repeated .lightspeed.devices.AstroSerialDevice devices = 1;
inline int GetSerialDevicesResponse::_internal_devices_size() const {
  return _impl_.devices_.size();
}
inline int GetSerialDevicesResponse::devices_size() const {
  return _internal_devices_size();
}
inline ::lightspeed::devices::AstroSerialDevice* GetSerialDevicesResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:lightspeed.response.GetSerialDevicesResponse.devices)
  return _impl_.devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::devices::AstroSerialDevice >*
GetSerialDevicesResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:lightspeed.response.GetSerialDevicesResponse.devices)
  return &_impl_.devices_;
}
inline const ::lightspeed::devices::AstroSerialDevice& GetSerialDevicesResponse::_internal_devices(int index) const {
  return _impl_.devices_.Get(index);
}
inline const ::lightspeed::devices::AstroSerialDevice& GetSerialDevicesResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:lightspeed.response.GetSerialDevicesResponse.devices)
  return _internal_devices(index);
}
inline ::lightspeed::devices::AstroSerialDevice* GetSerialDevicesResponse::_internal_add_devices() {
  return _impl_.devices_.Add();
}
inline ::lightspeed::devices::AstroSerialDevice* GetSerialDevicesResponse::add_devices() {
  ::lightspeed::devices::AstroSerialDevice* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:lightspeed.response.GetSerialDevicesResponse.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::devices::AstroSerialDevice >&
GetSerialDevicesResponse::devices() const {
  // @@protoc_insertion_point(field_list:lightspeed.response.GetSerialDevicesResponse.devices)
  return _impl_.devices_;
}

// -------------------------------------------------------------------

// EfwCalibrationResponse

// string status = 1;
inline void EfwCalibrationResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& EfwCalibrationResponse::status() const {
  // @@protoc_insertion_point(field_get:lightspeed.response.EfwCalibrationResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EfwCalibrationResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.response.EfwCalibrationResponse.status)
}
inline std::string* EfwCalibrationResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:lightspeed.response.EfwCalibrationResponse.status)
  return _s;
}
inline const std::string& EfwCalibrationResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void EfwCalibrationResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* EfwCalibrationResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* EfwCalibrationResponse::release_status() {
  // @@protoc_insertion_point(field_release:lightspeed.response.EfwCalibrationResponse.status)
  return _impl_.status_.Release();
}
inline void EfwCalibrationResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.response.EfwCalibrationResponse.status)
}

// -------------------------------------------------------------------

// SetPropertyResponse

// .lightspeed.devices.actions.DeviceActions status = 1;
inline void SetPropertyResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::lightspeed::devices::actions::DeviceActions SetPropertyResponse::_internal_status() const {
  return static_cast< ::lightspeed::devices::actions::DeviceActions >(_impl_.status_);
}
inline ::lightspeed::devices::actions::DeviceActions SetPropertyResponse::status() const {
  // @@protoc_insertion_point(field_get:lightspeed.response.SetPropertyResponse.status)
  return _internal_status();
}
inline void SetPropertyResponse::_internal_set_status(::lightspeed::devices::actions::DeviceActions value) {
  
  _impl_.status_ = value;
}
inline void SetPropertyResponse::set_status(::lightspeed::devices::actions::DeviceActions value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:lightspeed.response.SetPropertyResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace response
}  // namespace lightspeed

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_responses_2fresponse_2eproto

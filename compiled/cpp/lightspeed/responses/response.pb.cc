// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: responses/response.proto

#include "responses/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace lightspeed {
namespace response {
PROTOBUF_CONSTEXPR GetPropertiesResponse::GetPropertiesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{}
  , /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPropertiesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPropertiesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPropertiesResponseDefaultTypeInternal() {}
  union {
    GetPropertiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPropertiesResponseDefaultTypeInternal _GetPropertiesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceResponse::GetDeviceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceResponseDefaultTypeInternal() {}
  union {
    GetDeviceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceResponseDefaultTypeInternal _GetDeviceResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDevicesResponse::GetDevicesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.devices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDevicesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDevicesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDevicesResponseDefaultTypeInternal() {}
  union {
    GetDevicesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDevicesResponseDefaultTypeInternal _GetDevicesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSerialDeviceResponse::GetSerialDeviceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSerialDeviceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSerialDeviceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSerialDeviceResponseDefaultTypeInternal() {}
  union {
    GetSerialDeviceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSerialDeviceResponseDefaultTypeInternal _GetSerialDeviceResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSerialDevicesResponse::GetSerialDevicesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.devices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSerialDevicesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSerialDevicesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSerialDevicesResponseDefaultTypeInternal() {}
  union {
    GetSerialDevicesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSerialDevicesResponseDefaultTypeInternal _GetSerialDevicesResponse_default_instance_;
PROTOBUF_CONSTEXPR EfwCalibrationResponse::EfwCalibrationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EfwCalibrationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EfwCalibrationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EfwCalibrationResponseDefaultTypeInternal() {}
  union {
    EfwCalibrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EfwCalibrationResponseDefaultTypeInternal _EfwCalibrationResponse_default_instance_;
PROTOBUF_CONSTEXPR SetPropertyResponse::SetPropertyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetPropertyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPropertyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPropertyResponseDefaultTypeInternal() {}
  union {
    SetPropertyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPropertyResponseDefaultTypeInternal _SetPropertyResponse_default_instance_;
}  // namespace response
}  // namespace lightspeed
static ::_pb::Metadata file_level_metadata_responses_2fresponse_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_responses_2fresponse_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_responses_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_responses_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetPropertiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetPropertiesResponse, _impl_.device_name_),
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetPropertiesResponse, _impl_.properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetDeviceResponse, _impl_.device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetDevicesResponse, _impl_.devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetSerialDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetSerialDeviceResponse, _impl_.device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetSerialDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::GetSerialDevicesResponse, _impl_.devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::EfwCalibrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::EfwCalibrationResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::SetPropertyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lightspeed::response::SetPropertyResponse, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::lightspeed::response::GetPropertiesResponse)},
  { 8, -1, -1, sizeof(::lightspeed::response::GetDeviceResponse)},
  { 15, -1, -1, sizeof(::lightspeed::response::GetDevicesResponse)},
  { 22, -1, -1, sizeof(::lightspeed::response::GetSerialDeviceResponse)},
  { 29, -1, -1, sizeof(::lightspeed::response::GetSerialDevicesResponse)},
  { 36, -1, -1, sizeof(::lightspeed::response::EfwCalibrationResponse)},
  { 43, -1, -1, sizeof(::lightspeed::response::SetPropertyResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::lightspeed::response::_GetPropertiesResponse_default_instance_._instance,
  &::lightspeed::response::_GetDeviceResponse_default_instance_._instance,
  &::lightspeed::response::_GetDevicesResponse_default_instance_._instance,
  &::lightspeed::response::_GetSerialDeviceResponse_default_instance_._instance,
  &::lightspeed::response::_GetSerialDevicesResponse_default_instance_._instance,
  &::lightspeed::response::_EfwCalibrationResponse_default_instance_._instance,
  &::lightspeed::response::_SetPropertyResponse_default_instance_._instance,
};

const char descriptor_table_protodef_responses_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030responses/response.proto\022\023lightspeed.r"
  "esponse\032\026properties/props.proto\032\024devices"
  "/device.proto\032\025devices/actions.proto\"\\\n\025"
  "GetPropertiesResponse\022\023\n\013device_name\030\001 \001"
  "(\t\022.\n\nproperties\030\002 \003(\0132\032.lightspeed.prop"
  "s.Property\"D\n\021GetDeviceResponse\022/\n\006devic"
  "e\030\001 \001(\0132\037.lightspeed.devices.AstroDevice"
  "\"F\n\022GetDevicesResponse\0220\n\007devices\030\001 \003(\0132"
  "\037.lightspeed.devices.AstroDevice\"P\n\027GetS"
  "erialDeviceResponse\0225\n\006device\030\001 \001(\0132%.li"
  "ghtspeed.devices.AstroSerialDevice\"R\n\030Ge"
  "tSerialDevicesResponse\0226\n\007devices\030\001 \003(\0132"
  "%.lightspeed.devices.AstroSerialDevice\"("
  "\n\026EfwCalibrationResponse\022\016\n\006status\030\001 \001(\t"
  "\"P\n\023SetPropertyResponse\0229\n\006status\030\001 \001(\0162"
  ").lightspeed.devices.actions.DeviceActio"
  "nsP\000P\001P\002b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_responses_2fresponse_2eproto_deps[3] = {
  &::descriptor_table_devices_2factions_2eproto,
  &::descriptor_table_devices_2fdevice_2eproto,
  &::descriptor_table_properties_2fprops_2eproto,
};
static ::_pbi::once_flag descriptor_table_responses_2fresponse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_responses_2fresponse_2eproto = {
    false, false, 656, descriptor_table_protodef_responses_2fresponse_2eproto,
    "responses/response.proto",
    &descriptor_table_responses_2fresponse_2eproto_once, descriptor_table_responses_2fresponse_2eproto_deps, 3, 7,
    schemas, file_default_instances, TableStruct_responses_2fresponse_2eproto::offsets,
    file_level_metadata_responses_2fresponse_2eproto, file_level_enum_descriptors_responses_2fresponse_2eproto,
    file_level_service_descriptors_responses_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_responses_2fresponse_2eproto_getter() {
  return &descriptor_table_responses_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_responses_2fresponse_2eproto(&descriptor_table_responses_2fresponse_2eproto);
namespace lightspeed {
namespace response {

// ===================================================================

class GetPropertiesResponse::_Internal {
 public:
};

void GetPropertiesResponse::clear_properties() {
  _impl_.properties_.Clear();
}
GetPropertiesResponse::GetPropertiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.response.GetPropertiesResponse)
}
GetPropertiesResponse::GetPropertiesResponse(const GetPropertiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPropertiesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){from._impl_.properties_}
    , decltype(_impl_.device_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.response.GetPropertiesResponse)
}

inline void GetPropertiesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){arena}
    , decltype(_impl_.device_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPropertiesResponse::~GetPropertiesResponse() {
  // @@protoc_insertion_point(destructor:lightspeed.response.GetPropertiesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPropertiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.~RepeatedPtrField();
  _impl_.device_name_.Destroy();
}

void GetPropertiesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPropertiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.response.GetPropertiesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.device_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPropertiesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.response.GetPropertiesResponse.device_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .lightspeed.props.Property properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPropertiesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.response.GetPropertiesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_name = 1;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.response.GetPropertiesResponse.device_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_name(), target);
  }

  // repeated .lightspeed.props.Property properties = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.response.GetPropertiesResponse)
  return target;
}

size_t GetPropertiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.response.GetPropertiesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lightspeed.props.Property properties = 2;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_impl_.properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string device_name = 1;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPropertiesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPropertiesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPropertiesResponse::GetClassData() const { return &_class_data_; }


void GetPropertiesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPropertiesResponse*>(&to_msg);
  auto& from = static_cast<const GetPropertiesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.response.GetPropertiesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPropertiesResponse::CopyFrom(const GetPropertiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.response.GetPropertiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropertiesResponse::IsInitialized() const {
  return true;
}

void GetPropertiesResponse::InternalSwap(GetPropertiesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPropertiesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_responses_2fresponse_2eproto_getter, &descriptor_table_responses_2fresponse_2eproto_once,
      file_level_metadata_responses_2fresponse_2eproto[0]);
}

// ===================================================================

class GetDeviceResponse::_Internal {
 public:
  static const ::lightspeed::devices::AstroDevice& device(const GetDeviceResponse* msg);
};

const ::lightspeed::devices::AstroDevice&
GetDeviceResponse::_Internal::device(const GetDeviceResponse* msg) {
  return *msg->_impl_.device_;
}
void GetDeviceResponse::clear_device() {
  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
}
GetDeviceResponse::GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.response.GetDeviceResponse)
}
GetDeviceResponse::GetDeviceResponse(const GetDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    _this->_impl_.device_ = new ::lightspeed::devices::AstroDevice(*from._impl_.device_);
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.response.GetDeviceResponse)
}

inline void GetDeviceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDeviceResponse::~GetDeviceResponse() {
  // @@protoc_insertion_point(destructor:lightspeed.response.GetDeviceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_;
}

void GetDeviceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.response.GetDeviceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lightspeed.devices.AstroDevice device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.response.GetDeviceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightspeed.devices.AstroDevice device = 1;
  if (this->_internal_has_device()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.response.GetDeviceResponse)
  return target;
}

size_t GetDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.response.GetDeviceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lightspeed.devices.AstroDevice device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceResponse::GetClassData() const { return &_class_data_; }


void GetDeviceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceResponse*>(&to_msg);
  auto& from = static_cast<const GetDeviceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.response.GetDeviceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _this->_internal_mutable_device()->::lightspeed::devices::AstroDevice::MergeFrom(
        from._internal_device());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceResponse::CopyFrom(const GetDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.response.GetDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceResponse::IsInitialized() const {
  return true;
}

void GetDeviceResponse::InternalSwap(GetDeviceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.device_, other->_impl_.device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_responses_2fresponse_2eproto_getter, &descriptor_table_responses_2fresponse_2eproto_once,
      file_level_metadata_responses_2fresponse_2eproto[1]);
}

// ===================================================================

class GetDevicesResponse::_Internal {
 public:
};

void GetDevicesResponse::clear_devices() {
  _impl_.devices_.Clear();
}
GetDevicesResponse::GetDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.response.GetDevicesResponse)
}
GetDevicesResponse::GetDevicesResponse(const GetDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDevicesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){from._impl_.devices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightspeed.response.GetDevicesResponse)
}

inline void GetDevicesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDevicesResponse::~GetDevicesResponse() {
  // @@protoc_insertion_point(destructor:lightspeed.response.GetDevicesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.devices_.~RepeatedPtrField();
}

void GetDevicesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.response.GetDevicesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDevicesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .lightspeed.devices.AstroDevice devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDevicesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.response.GetDevicesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lightspeed.devices.AstroDevice devices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.response.GetDevicesResponse)
  return target;
}

size_t GetDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.response.GetDevicesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lightspeed.devices.AstroDevice devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->_impl_.devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDevicesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDevicesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDevicesResponse::GetClassData() const { return &_class_data_; }


void GetDevicesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDevicesResponse*>(&to_msg);
  auto& from = static_cast<const GetDevicesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.response.GetDevicesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.devices_.MergeFrom(from._impl_.devices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDevicesResponse::CopyFrom(const GetDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.response.GetDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDevicesResponse::IsInitialized() const {
  return true;
}

void GetDevicesResponse::InternalSwap(GetDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDevicesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_responses_2fresponse_2eproto_getter, &descriptor_table_responses_2fresponse_2eproto_once,
      file_level_metadata_responses_2fresponse_2eproto[2]);
}

// ===================================================================

class GetSerialDeviceResponse::_Internal {
 public:
  static const ::lightspeed::devices::AstroSerialDevice& device(const GetSerialDeviceResponse* msg);
};

const ::lightspeed::devices::AstroSerialDevice&
GetSerialDeviceResponse::_Internal::device(const GetSerialDeviceResponse* msg) {
  return *msg->_impl_.device_;
}
void GetSerialDeviceResponse::clear_device() {
  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
}
GetSerialDeviceResponse::GetSerialDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.response.GetSerialDeviceResponse)
}
GetSerialDeviceResponse::GetSerialDeviceResponse(const GetSerialDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSerialDeviceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    _this->_impl_.device_ = new ::lightspeed::devices::AstroSerialDevice(*from._impl_.device_);
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.response.GetSerialDeviceResponse)
}

inline void GetSerialDeviceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSerialDeviceResponse::~GetSerialDeviceResponse() {
  // @@protoc_insertion_point(destructor:lightspeed.response.GetSerialDeviceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSerialDeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_;
}

void GetSerialDeviceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSerialDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.response.GetSerialDeviceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSerialDeviceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lightspeed.devices.AstroSerialDevice device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSerialDeviceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.response.GetSerialDeviceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightspeed.devices.AstroSerialDevice device = 1;
  if (this->_internal_has_device()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.response.GetSerialDeviceResponse)
  return target;
}

size_t GetSerialDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.response.GetSerialDeviceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lightspeed.devices.AstroSerialDevice device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSerialDeviceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSerialDeviceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSerialDeviceResponse::GetClassData() const { return &_class_data_; }


void GetSerialDeviceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSerialDeviceResponse*>(&to_msg);
  auto& from = static_cast<const GetSerialDeviceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.response.GetSerialDeviceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _this->_internal_mutable_device()->::lightspeed::devices::AstroSerialDevice::MergeFrom(
        from._internal_device());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSerialDeviceResponse::CopyFrom(const GetSerialDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.response.GetSerialDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSerialDeviceResponse::IsInitialized() const {
  return true;
}

void GetSerialDeviceResponse::InternalSwap(GetSerialDeviceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.device_, other->_impl_.device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSerialDeviceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_responses_2fresponse_2eproto_getter, &descriptor_table_responses_2fresponse_2eproto_once,
      file_level_metadata_responses_2fresponse_2eproto[3]);
}

// ===================================================================

class GetSerialDevicesResponse::_Internal {
 public:
};

void GetSerialDevicesResponse::clear_devices() {
  _impl_.devices_.Clear();
}
GetSerialDevicesResponse::GetSerialDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.response.GetSerialDevicesResponse)
}
GetSerialDevicesResponse::GetSerialDevicesResponse(const GetSerialDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSerialDevicesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){from._impl_.devices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightspeed.response.GetSerialDevicesResponse)
}

inline void GetSerialDevicesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSerialDevicesResponse::~GetSerialDevicesResponse() {
  // @@protoc_insertion_point(destructor:lightspeed.response.GetSerialDevicesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSerialDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.devices_.~RepeatedPtrField();
}

void GetSerialDevicesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSerialDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.response.GetSerialDevicesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSerialDevicesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .lightspeed.devices.AstroSerialDevice devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSerialDevicesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.response.GetSerialDevicesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lightspeed.devices.AstroSerialDevice devices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.response.GetSerialDevicesResponse)
  return target;
}

size_t GetSerialDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.response.GetSerialDevicesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lightspeed.devices.AstroSerialDevice devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->_impl_.devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSerialDevicesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSerialDevicesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSerialDevicesResponse::GetClassData() const { return &_class_data_; }


void GetSerialDevicesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSerialDevicesResponse*>(&to_msg);
  auto& from = static_cast<const GetSerialDevicesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.response.GetSerialDevicesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.devices_.MergeFrom(from._impl_.devices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSerialDevicesResponse::CopyFrom(const GetSerialDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.response.GetSerialDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSerialDevicesResponse::IsInitialized() const {
  return true;
}

void GetSerialDevicesResponse::InternalSwap(GetSerialDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSerialDevicesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_responses_2fresponse_2eproto_getter, &descriptor_table_responses_2fresponse_2eproto_once,
      file_level_metadata_responses_2fresponse_2eproto[4]);
}

// ===================================================================

class EfwCalibrationResponse::_Internal {
 public:
};

EfwCalibrationResponse::EfwCalibrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.response.EfwCalibrationResponse)
}
EfwCalibrationResponse::EfwCalibrationResponse(const EfwCalibrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EfwCalibrationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lightspeed.response.EfwCalibrationResponse)
}

inline void EfwCalibrationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EfwCalibrationResponse::~EfwCalibrationResponse() {
  // @@protoc_insertion_point(destructor:lightspeed.response.EfwCalibrationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EfwCalibrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void EfwCalibrationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EfwCalibrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.response.EfwCalibrationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EfwCalibrationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lightspeed.response.EfwCalibrationResponse.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EfwCalibrationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.response.EfwCalibrationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightspeed.response.EfwCalibrationResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.response.EfwCalibrationResponse)
  return target;
}

size_t EfwCalibrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.response.EfwCalibrationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EfwCalibrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EfwCalibrationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EfwCalibrationResponse::GetClassData() const { return &_class_data_; }


void EfwCalibrationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EfwCalibrationResponse*>(&to_msg);
  auto& from = static_cast<const EfwCalibrationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.response.EfwCalibrationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EfwCalibrationResponse::CopyFrom(const EfwCalibrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.response.EfwCalibrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EfwCalibrationResponse::IsInitialized() const {
  return true;
}

void EfwCalibrationResponse::InternalSwap(EfwCalibrationResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EfwCalibrationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_responses_2fresponse_2eproto_getter, &descriptor_table_responses_2fresponse_2eproto_once,
      file_level_metadata_responses_2fresponse_2eproto[5]);
}

// ===================================================================

class SetPropertyResponse::_Internal {
 public:
};

SetPropertyResponse::SetPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lightspeed.response.SetPropertyResponse)
}
SetPropertyResponse::SetPropertyResponse(const SetPropertyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetPropertyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:lightspeed.response.SetPropertyResponse)
}

inline void SetPropertyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetPropertyResponse::~SetPropertyResponse() {
  // @@protoc_insertion_point(destructor:lightspeed.response.SetPropertyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPropertyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetPropertyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetPropertyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightspeed.response.SetPropertyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPropertyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lightspeed.devices.actions.DeviceActions status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::lightspeed::devices::actions::DeviceActions>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPropertyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightspeed.response.SetPropertyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightspeed.devices.actions.DeviceActions status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightspeed.response.SetPropertyResponse)
  return target;
}

size_t SetPropertyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightspeed.response.SetPropertyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lightspeed.devices.actions.DeviceActions status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPropertyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetPropertyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPropertyResponse::GetClassData() const { return &_class_data_; }


void SetPropertyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetPropertyResponse*>(&to_msg);
  auto& from = static_cast<const SetPropertyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lightspeed.response.SetPropertyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPropertyResponse::CopyFrom(const SetPropertyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightspeed.response.SetPropertyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPropertyResponse::IsInitialized() const {
  return true;
}

void SetPropertyResponse::InternalSwap(SetPropertyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPropertyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_responses_2fresponse_2eproto_getter, &descriptor_table_responses_2fresponse_2eproto_once,
      file_level_metadata_responses_2fresponse_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace response
}  // namespace lightspeed
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lightspeed::response::GetPropertiesResponse*
Arena::CreateMaybeMessage< ::lightspeed::response::GetPropertiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::response::GetPropertiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::response::GetDeviceResponse*
Arena::CreateMaybeMessage< ::lightspeed::response::GetDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::response::GetDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::response::GetDevicesResponse*
Arena::CreateMaybeMessage< ::lightspeed::response::GetDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::response::GetDevicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::response::GetSerialDeviceResponse*
Arena::CreateMaybeMessage< ::lightspeed::response::GetSerialDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::response::GetSerialDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::response::GetSerialDevicesResponse*
Arena::CreateMaybeMessage< ::lightspeed::response::GetSerialDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::response::GetSerialDevicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::response::EfwCalibrationResponse*
Arena::CreateMaybeMessage< ::lightspeed::response::EfwCalibrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::response::EfwCalibrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightspeed::response::SetPropertyResponse*
Arena::CreateMaybeMessage< ::lightspeed::response::SetPropertyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lightspeed::response::SetPropertyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devices/device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_devices_2fdevice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_devices_2fdevice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "properties/props.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_devices_2fdevice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_devices_2fdevice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_devices_2fdevice_2eproto;
namespace lightspeed {
namespace devices {
class AstroDevice;
struct AstroDeviceDefaultTypeInternal;
extern AstroDeviceDefaultTypeInternal _AstroDevice_default_instance_;
class AstroSerialDevice;
struct AstroSerialDeviceDefaultTypeInternal;
extern AstroSerialDeviceDefaultTypeInternal _AstroSerialDevice_default_instance_;
}  // namespace devices
}  // namespace lightspeed
PROTOBUF_NAMESPACE_OPEN
template<> ::lightspeed::devices::AstroDevice* Arena::CreateMaybeMessage<::lightspeed::devices::AstroDevice>(Arena*);
template<> ::lightspeed::devices::AstroSerialDevice* Arena::CreateMaybeMessage<::lightspeed::devices::AstroSerialDevice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lightspeed {
namespace devices {

enum Family : int {
  CCD = 0,
  MOUNT = 1,
  FOCUSER = 2,
  FILTER_WHEEL = 3,
  POWER_BOX = 4,
  Family_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Family_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Family_IsValid(int value);
constexpr Family Family_MIN = CCD;
constexpr Family Family_MAX = POWER_BOX;
constexpr int Family_ARRAYSIZE = Family_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Family_descriptor();
template<typename T>
inline const std::string& Family_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Family>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Family_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Family_descriptor(), enum_t_value);
}
inline bool Family_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Family* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Family>(
    Family_descriptor(), name, value);
}
// ===================================================================

class AstroSerialDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.devices.AstroSerialDevice) */ {
 public:
  inline AstroSerialDevice() : AstroSerialDevice(nullptr) {}
  ~AstroSerialDevice() override;
  explicit PROTOBUF_CONSTEXPR AstroSerialDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AstroSerialDevice(const AstroSerialDevice& from);
  AstroSerialDevice(AstroSerialDevice&& from) noexcept
    : AstroSerialDevice() {
    *this = ::std::move(from);
  }

  inline AstroSerialDevice& operator=(const AstroSerialDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstroSerialDevice& operator=(AstroSerialDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstroSerialDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstroSerialDevice* internal_default_instance() {
    return reinterpret_cast<const AstroSerialDevice*>(
               &_AstroSerialDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AstroSerialDevice& a, AstroSerialDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(AstroSerialDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstroSerialDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstroSerialDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AstroSerialDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AstroSerialDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AstroSerialDevice& from) {
    AstroSerialDevice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AstroSerialDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.devices.AstroSerialDevice";
  }
  protected:
  explicit AstroSerialDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kAddressFieldNumber = 4,
    kBaudFieldNumber = 5,
    kFamilyFieldNumber = 6,
  };
  // repeated .lightspeed.props.Property properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::lightspeed::props::Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >*
      mutable_properties();
  private:
  const ::lightspeed::props::Property& _internal_properties(int index) const;
  ::lightspeed::props::Property* _internal_add_properties();
  public:
  const ::lightspeed::props::Property& properties(int index) const;
  ::lightspeed::props::Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >&
      properties() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int32 baud = 5;
  void clear_baud();
  int32_t baud() const;
  void set_baud(int32_t value);
  private:
  int32_t _internal_baud() const;
  void _internal_set_baud(int32_t value);
  public:

  // .lightspeed.devices.Family family = 6;
  void clear_family();
  ::lightspeed::devices::Family family() const;
  void set_family(::lightspeed::devices::Family value);
  private:
  ::lightspeed::devices::Family _internal_family() const;
  void _internal_set_family(::lightspeed::devices::Family value);
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.devices.AstroSerialDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property > properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    int32_t baud_;
    int family_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_devices_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class AstroDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightspeed.devices.AstroDevice) */ {
 public:
  inline AstroDevice() : AstroDevice(nullptr) {}
  ~AstroDevice() override;
  explicit PROTOBUF_CONSTEXPR AstroDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AstroDevice(const AstroDevice& from);
  AstroDevice(AstroDevice&& from) noexcept
    : AstroDevice() {
    *this = ::std::move(from);
  }

  inline AstroDevice& operator=(const AstroDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstroDevice& operator=(AstroDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstroDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstroDevice* internal_default_instance() {
    return reinterpret_cast<const AstroDevice*>(
               &_AstroDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AstroDevice& a, AstroDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(AstroDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstroDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstroDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AstroDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AstroDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AstroDevice& from) {
    AstroDevice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AstroDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightspeed.devices.AstroDevice";
  }
  protected:
  explicit AstroDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kFamilyFieldNumber = 4,
  };
  // repeated .lightspeed.props.Property properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::lightspeed::props::Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >*
      mutable_properties();
  private:
  const ::lightspeed::props::Property& _internal_properties(int index) const;
  ::lightspeed::props::Property* _internal_add_properties();
  public:
  const ::lightspeed::props::Property& properties(int index) const;
  ::lightspeed::props::Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >&
      properties() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .lightspeed.devices.Family family = 4;
  void clear_family();
  ::lightspeed::devices::Family family() const;
  void set_family(::lightspeed::devices::Family value);
  private:
  ::lightspeed::devices::Family _internal_family() const;
  void _internal_set_family(::lightspeed::devices::Family value);
  public:

  // @@protoc_insertion_point(class_scope:lightspeed.devices.AstroDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property > properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int family_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_devices_2fdevice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AstroSerialDevice

// string id = 1;
inline void AstroSerialDevice::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AstroSerialDevice::id() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.AstroSerialDevice.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AstroSerialDevice::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.devices.AstroSerialDevice.id)
}
inline std::string* AstroSerialDevice::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.AstroSerialDevice.id)
  return _s;
}
inline const std::string& AstroSerialDevice::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AstroSerialDevice::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AstroSerialDevice::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AstroSerialDevice::release_id() {
  // @@protoc_insertion_point(field_release:lightspeed.devices.AstroSerialDevice.id)
  return _impl_.id_.Release();
}
inline void AstroSerialDevice::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.devices.AstroSerialDevice.id)
}

// string name = 2;
inline void AstroSerialDevice::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AstroSerialDevice::name() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.AstroSerialDevice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AstroSerialDevice::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.devices.AstroSerialDevice.name)
}
inline std::string* AstroSerialDevice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.AstroSerialDevice.name)
  return _s;
}
inline const std::string& AstroSerialDevice::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AstroSerialDevice::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AstroSerialDevice::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AstroSerialDevice::release_name() {
  // @@protoc_insertion_point(field_release:lightspeed.devices.AstroSerialDevice.name)
  return _impl_.name_.Release();
}
inline void AstroSerialDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.devices.AstroSerialDevice.name)
}

// repeated .lightspeed.props.Property properties = 3;
inline int AstroSerialDevice::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int AstroSerialDevice::properties_size() const {
  return _internal_properties_size();
}
inline ::lightspeed::props::Property* AstroSerialDevice::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.AstroSerialDevice.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >*
AstroSerialDevice::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:lightspeed.devices.AstroSerialDevice.properties)
  return &_impl_.properties_;
}
inline const ::lightspeed::props::Property& AstroSerialDevice::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::lightspeed::props::Property& AstroSerialDevice::properties(int index) const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.AstroSerialDevice.properties)
  return _internal_properties(index);
}
inline ::lightspeed::props::Property* AstroSerialDevice::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::lightspeed::props::Property* AstroSerialDevice::add_properties() {
  ::lightspeed::props::Property* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:lightspeed.devices.AstroSerialDevice.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >&
AstroSerialDevice::properties() const {
  // @@protoc_insertion_point(field_list:lightspeed.devices.AstroSerialDevice.properties)
  return _impl_.properties_;
}

// string address = 4;
inline void AstroSerialDevice::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& AstroSerialDevice::address() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.AstroSerialDevice.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AstroSerialDevice::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.devices.AstroSerialDevice.address)
}
inline std::string* AstroSerialDevice::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.AstroSerialDevice.address)
  return _s;
}
inline const std::string& AstroSerialDevice::_internal_address() const {
  return _impl_.address_.Get();
}
inline void AstroSerialDevice::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* AstroSerialDevice::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* AstroSerialDevice::release_address() {
  // @@protoc_insertion_point(field_release:lightspeed.devices.AstroSerialDevice.address)
  return _impl_.address_.Release();
}
inline void AstroSerialDevice::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.devices.AstroSerialDevice.address)
}

// int32 baud = 5;
inline void AstroSerialDevice::clear_baud() {
  _impl_.baud_ = 0;
}
inline int32_t AstroSerialDevice::_internal_baud() const {
  return _impl_.baud_;
}
inline int32_t AstroSerialDevice::baud() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.AstroSerialDevice.baud)
  return _internal_baud();
}
inline void AstroSerialDevice::_internal_set_baud(int32_t value) {
  
  _impl_.baud_ = value;
}
inline void AstroSerialDevice::set_baud(int32_t value) {
  _internal_set_baud(value);
  // @@protoc_insertion_point(field_set:lightspeed.devices.AstroSerialDevice.baud)
}

// .lightspeed.devices.Family family = 6;
inline void AstroSerialDevice::clear_family() {
  _impl_.family_ = 0;
}
inline ::lightspeed::devices::Family AstroSerialDevice::_internal_family() const {
  return static_cast< ::lightspeed::devices::Family >(_impl_.family_);
}
inline ::lightspeed::devices::Family AstroSerialDevice::family() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.AstroSerialDevice.family)
  return _internal_family();
}
inline void AstroSerialDevice::_internal_set_family(::lightspeed::devices::Family value) {
  
  _impl_.family_ = value;
}
inline void AstroSerialDevice::set_family(::lightspeed::devices::Family value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:lightspeed.devices.AstroSerialDevice.family)
}

// -------------------------------------------------------------------

// AstroDevice

// string id = 1;
inline void AstroDevice::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AstroDevice::id() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.AstroDevice.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AstroDevice::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.devices.AstroDevice.id)
}
inline std::string* AstroDevice::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.AstroDevice.id)
  return _s;
}
inline const std::string& AstroDevice::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AstroDevice::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AstroDevice::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AstroDevice::release_id() {
  // @@protoc_insertion_point(field_release:lightspeed.devices.AstroDevice.id)
  return _impl_.id_.Release();
}
inline void AstroDevice::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.devices.AstroDevice.id)
}

// string name = 2;
inline void AstroDevice::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AstroDevice::name() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.AstroDevice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AstroDevice::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lightspeed.devices.AstroDevice.name)
}
inline std::string* AstroDevice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.AstroDevice.name)
  return _s;
}
inline const std::string& AstroDevice::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AstroDevice::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AstroDevice::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AstroDevice::release_name() {
  // @@protoc_insertion_point(field_release:lightspeed.devices.AstroDevice.name)
  return _impl_.name_.Release();
}
inline void AstroDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lightspeed.devices.AstroDevice.name)
}

// repeated .lightspeed.props.Property properties = 3;
inline int AstroDevice::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int AstroDevice::properties_size() const {
  return _internal_properties_size();
}
inline ::lightspeed::props::Property* AstroDevice::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:lightspeed.devices.AstroDevice.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >*
AstroDevice::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:lightspeed.devices.AstroDevice.properties)
  return &_impl_.properties_;
}
inline const ::lightspeed::props::Property& AstroDevice::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::lightspeed::props::Property& AstroDevice::properties(int index) const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.AstroDevice.properties)
  return _internal_properties(index);
}
inline ::lightspeed::props::Property* AstroDevice::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::lightspeed::props::Property* AstroDevice::add_properties() {
  ::lightspeed::props::Property* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:lightspeed.devices.AstroDevice.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightspeed::props::Property >&
AstroDevice::properties() const {
  // @@protoc_insertion_point(field_list:lightspeed.devices.AstroDevice.properties)
  return _impl_.properties_;
}

// .lightspeed.devices.Family family = 4;
inline void AstroDevice::clear_family() {
  _impl_.family_ = 0;
}
inline ::lightspeed::devices::Family AstroDevice::_internal_family() const {
  return static_cast< ::lightspeed::devices::Family >(_impl_.family_);
}
inline ::lightspeed::devices::Family AstroDevice::family() const {
  // @@protoc_insertion_point(field_get:lightspeed.devices.AstroDevice.family)
  return _internal_family();
}
inline void AstroDevice::_internal_set_family(::lightspeed::devices::Family value) {
  
  _impl_.family_ = value;
}
inline void AstroDevice::set_family(::lightspeed::devices::Family value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:lightspeed.devices.AstroDevice.family)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace devices
}  // namespace lightspeed

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lightspeed::devices::Family> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lightspeed::devices::Family>() {
  return ::lightspeed::devices::Family_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_devices_2fdevice_2eproto

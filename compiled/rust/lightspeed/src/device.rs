// This file is generated by rust-protobuf 3.0.2. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protocol/devices/device.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_2;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightspeed.devices.ProtoDevice)
pub struct ProtoDevice {
    // message fields
    // @@protoc_insertion_point(field:lightspeed.devices.ProtoDevice.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:lightspeed.devices.ProtoDevice.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:lightspeed.devices.ProtoDevice.properties)
    pub properties: ::std::vec::Vec<super::props::Property>,
    // @@protoc_insertion_point(field:lightspeed.devices.ProtoDevice.address)
    pub address: ::std::string::String,
    // @@protoc_insertion_point(field:lightspeed.devices.ProtoDevice.baud)
    pub baud: i32,
    // @@protoc_insertion_point(field:lightspeed.devices.ProtoDevice.family)
    pub family: ::protobuf::EnumOrUnknown<proto_device::Family>,
    // special fields
    // @@protoc_insertion_point(special_field:lightspeed.devices.ProtoDevice.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProtoDevice {
    fn default() -> &'a ProtoDevice {
        <ProtoDevice as ::protobuf::Message>::default_instance()
    }
}

impl ProtoDevice {
    pub fn new() -> ProtoDevice {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ProtoDevice| { &m.id },
            |m: &mut ProtoDevice| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ProtoDevice| { &m.name },
            |m: &mut ProtoDevice| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "properties",
            |m: &ProtoDevice| { &m.properties },
            |m: &mut ProtoDevice| { &mut m.properties },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &ProtoDevice| { &m.address },
            |m: &mut ProtoDevice| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "baud",
            |m: &ProtoDevice| { &m.baud },
            |m: &mut ProtoDevice| { &mut m.baud },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "family",
            |m: &ProtoDevice| { &m.family },
            |m: &mut ProtoDevice| { &mut m.family },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProtoDevice>(
            "ProtoDevice",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProtoDevice {
    const NAME: &'static str = "ProtoDevice";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.properties.push(is.read_message()?);
                },
                34 => {
                    self.address = is.read_string()?;
                },
                40 => {
                    self.baud = is.read_int32()?;
                },
                48 => {
                    self.family = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.address);
        }
        if self.baud != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.baud);
        }
        if self.family != ::protobuf::EnumOrUnknown::new(proto_device::Family::CCD) {
            my_size += ::protobuf::rt::int32_size(6, self.family.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.properties {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if !self.address.is_empty() {
            os.write_string(4, &self.address)?;
        }
        if self.baud != 0 {
            os.write_int32(5, self.baud)?;
        }
        if self.family != ::protobuf::EnumOrUnknown::new(proto_device::Family::CCD) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.family))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProtoDevice {
        ProtoDevice::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.properties.clear();
        self.address.clear();
        self.baud = 0;
        self.family = ::protobuf::EnumOrUnknown::new(proto_device::Family::CCD);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProtoDevice {
        static instance: ProtoDevice = ProtoDevice {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            properties: ::std::vec::Vec::new(),
            address: ::std::string::String::new(),
            baud: 0,
            family: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProtoDevice {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProtoDevice").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProtoDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtoDevice {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ProtoDevice`
pub mod proto_device {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:lightspeed.devices.ProtoDevice.Family)
    pub enum Family {
        // @@protoc_insertion_point(enum_value:lightspeed.devices.ProtoDevice.Family.CCD)
        CCD = 0,
        // @@protoc_insertion_point(enum_value:lightspeed.devices.ProtoDevice.Family.MOUNT)
        MOUNT = 1,
        // @@protoc_insertion_point(enum_value:lightspeed.devices.ProtoDevice.Family.FOCUSER)
        FOCUSER = 2,
        // @@protoc_insertion_point(enum_value:lightspeed.devices.ProtoDevice.Family.FILTER_WHEEL)
        FILTER_WHEEL = 3,
        // @@protoc_insertion_point(enum_value:lightspeed.devices.ProtoDevice.Family.POWER_BOX)
        POWER_BOX = 4,
    }

    impl ::protobuf::Enum for Family {
        const NAME: &'static str = "Family";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Family> {
            match value {
                0 => ::std::option::Option::Some(Family::CCD),
                1 => ::std::option::Option::Some(Family::MOUNT),
                2 => ::std::option::Option::Some(Family::FOCUSER),
                3 => ::std::option::Option::Some(Family::FILTER_WHEEL),
                4 => ::std::option::Option::Some(Family::POWER_BOX),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Family] = &[
            Family::CCD,
            Family::MOUNT,
            Family::FOCUSER,
            Family::FILTER_WHEEL,
            Family::POWER_BOX,
        ];
    }

    impl ::protobuf::EnumFull for Family {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ProtoDevice.Family").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Family {
        fn default() -> Self {
            Family::CCD
        }
    }

    impl Family {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Family>("ProtoDevice.Family")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dprotocol/devices/device.proto\x12\x12lightspeed.devices\x1a\x1fpro\
    tocol/properties/props.protoP\0\"\xa7\x02\n\x0bProtoDevice\x12\x0e\n\x02\
    id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04na\
    me\x12:\n\nproperties\x18\x03\x20\x03(\x0b2\x1a.lightspeed.props.Propert\
    yR\nproperties\x12\x18\n\x07address\x18\x04\x20\x01(\tR\x07address\x12\
    \x12\n\x04baud\x18\x05\x20\x01(\x05R\x04baud\x12>\n\x06family\x18\x06\
    \x20\x01(\x0e2&.lightspeed.devices.ProtoDevice.FamilyR\x06family\"J\n\
    \x06Family\x12\x07\n\x03CCD\x10\0\x12\t\n\x05MOUNT\x10\x01\x12\x0b\n\x07\
    FOCUSER\x10\x02\x12\x10\n\x0cFILTER_WHEEL\x10\x03\x12\r\n\tPOWER_BOX\x10\
    \x04b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::props::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ProtoDevice::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(proto_device::Family::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

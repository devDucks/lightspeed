// This file is generated by rust-protobuf 3.0.2. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protocol/main/request.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_2;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightspeed.request.GetPropertiesRequest)
pub struct GetPropertiesRequest {
    // message fields
    // @@protoc_insertion_point(field:lightspeed.request.GetPropertiesRequest.device_name)
    pub device_name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lightspeed.request.GetPropertiesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPropertiesRequest {
    fn default() -> &'a GetPropertiesRequest {
        <GetPropertiesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPropertiesRequest {
    pub fn new() -> GetPropertiesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "device_name",
            |m: &GetPropertiesRequest| { &m.device_name },
            |m: &mut GetPropertiesRequest| { &mut m.device_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPropertiesRequest>(
            "GetPropertiesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPropertiesRequest {
    const NAME: &'static str = "GetPropertiesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.device_name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.device_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.device_name.is_empty() {
            os.write_string(1, &self.device_name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPropertiesRequest {
        GetPropertiesRequest::new()
    }

    fn clear(&mut self) {
        self.device_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPropertiesRequest {
        static instance: GetPropertiesRequest = GetPropertiesRequest {
            device_name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPropertiesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPropertiesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPropertiesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPropertiesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightspeed.request.GetPropertyRequest)
pub struct GetPropertyRequest {
    // message fields
    // @@protoc_insertion_point(field:lightspeed.request.GetPropertyRequest.device_name)
    pub device_name: ::std::string::String,
    // @@protoc_insertion_point(field:lightspeed.request.GetPropertyRequest.property_name)
    pub property_name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lightspeed.request.GetPropertyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPropertyRequest {
    fn default() -> &'a GetPropertyRequest {
        <GetPropertyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPropertyRequest {
    pub fn new() -> GetPropertyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "device_name",
            |m: &GetPropertyRequest| { &m.device_name },
            |m: &mut GetPropertyRequest| { &mut m.device_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "property_name",
            |m: &GetPropertyRequest| { &m.property_name },
            |m: &mut GetPropertyRequest| { &mut m.property_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPropertyRequest>(
            "GetPropertyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPropertyRequest {
    const NAME: &'static str = "GetPropertyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.device_name = is.read_string()?;
                },
                18 => {
                    self.property_name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.device_name);
        }
        if !self.property_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.property_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.device_name.is_empty() {
            os.write_string(1, &self.device_name)?;
        }
        if !self.property_name.is_empty() {
            os.write_string(2, &self.property_name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPropertyRequest {
        GetPropertyRequest::new()
    }

    fn clear(&mut self) {
        self.device_name.clear();
        self.property_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPropertyRequest {
        static instance: GetPropertyRequest = GetPropertyRequest {
            device_name: ::std::string::String::new(),
            property_name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPropertyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPropertyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPropertyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPropertyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightspeed.request.SetPropertyRequest)
pub struct SetPropertyRequest {
    // message fields
    // @@protoc_insertion_point(field:lightspeed.request.SetPropertyRequest.device_name)
    pub device_name: ::std::string::String,
    // @@protoc_insertion_point(field:lightspeed.request.SetPropertyRequest.property_name)
    pub property_name: ::std::string::String,
    // @@protoc_insertion_point(field:lightspeed.request.SetPropertyRequest.property_value)
    pub property_value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lightspeed.request.SetPropertyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SetPropertyRequest {
    fn default() -> &'a SetPropertyRequest {
        <SetPropertyRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetPropertyRequest {
    pub fn new() -> SetPropertyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "device_name",
            |m: &SetPropertyRequest| { &m.device_name },
            |m: &mut SetPropertyRequest| { &mut m.device_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "property_name",
            |m: &SetPropertyRequest| { &m.property_name },
            |m: &mut SetPropertyRequest| { &mut m.property_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "property_value",
            |m: &SetPropertyRequest| { &m.property_value },
            |m: &mut SetPropertyRequest| { &mut m.property_value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SetPropertyRequest>(
            "SetPropertyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SetPropertyRequest {
    const NAME: &'static str = "SetPropertyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.device_name = is.read_string()?;
                },
                18 => {
                    self.property_name = is.read_string()?;
                },
                26 => {
                    self.property_value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.device_name);
        }
        if !self.property_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.property_name);
        }
        if !self.property_value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.property_value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.device_name.is_empty() {
            os.write_string(1, &self.device_name)?;
        }
        if !self.property_name.is_empty() {
            os.write_string(2, &self.property_name)?;
        }
        if !self.property_value.is_empty() {
            os.write_string(3, &self.property_value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SetPropertyRequest {
        SetPropertyRequest::new()
    }

    fn clear(&mut self) {
        self.device_name.clear();
        self.property_name.clear();
        self.property_value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SetPropertyRequest {
        static instance: SetPropertyRequest = SetPropertyRequest {
            device_name: ::std::string::String::new(),
            property_name: ::std::string::String::new(),
            property_value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SetPropertyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SetPropertyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SetPropertyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetPropertyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightspeed.request.PropertyRequest)
pub struct PropertyRequest {
    // message oneof groups
    pub ask: ::std::option::Option<property_request::Ask>,
    // special fields
    // @@protoc_insertion_point(special_field:lightspeed.request.PropertyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PropertyRequest {
    fn default() -> &'a PropertyRequest {
        <PropertyRequest as ::protobuf::Message>::default_instance()
    }
}

impl PropertyRequest {
    pub fn new() -> PropertyRequest {
        ::std::default::Default::default()
    }

    // .lightspeed.request.GetPropertyRequest property = 1;

    pub fn property(&self) -> &GetPropertyRequest {
        match self.ask {
            ::std::option::Option::Some(property_request::Ask::Property(ref v)) => v,
            _ => <GetPropertyRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_property(&mut self) {
        self.ask = ::std::option::Option::None;
    }

    pub fn has_property(&self) -> bool {
        match self.ask {
            ::std::option::Option::Some(property_request::Ask::Property(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: GetPropertyRequest) {
        self.ask = ::std::option::Option::Some(property_request::Ask::Property(v))
    }

    // Mutable pointer to the field.
    pub fn mut_property(&mut self) -> &mut GetPropertyRequest {
        if let ::std::option::Option::Some(property_request::Ask::Property(_)) = self.ask {
        } else {
            self.ask = ::std::option::Option::Some(property_request::Ask::Property(GetPropertyRequest::new()));
        }
        match self.ask {
            ::std::option::Option::Some(property_request::Ask::Property(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_property(&mut self) -> GetPropertyRequest {
        if self.has_property() {
            match self.ask.take() {
                ::std::option::Option::Some(property_request::Ask::Property(v)) => v,
                _ => panic!(),
            }
        } else {
            GetPropertyRequest::new()
        }
    }

    // .lightspeed.request.GetPropertiesRequest properties = 2;

    pub fn properties(&self) -> &GetPropertiesRequest {
        match self.ask {
            ::std::option::Option::Some(property_request::Ask::Properties(ref v)) => v,
            _ => <GetPropertiesRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_properties(&mut self) {
        self.ask = ::std::option::Option::None;
    }

    pub fn has_properties(&self) -> bool {
        match self.ask {
            ::std::option::Option::Some(property_request::Ask::Properties(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: GetPropertiesRequest) {
        self.ask = ::std::option::Option::Some(property_request::Ask::Properties(v))
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut GetPropertiesRequest {
        if let ::std::option::Option::Some(property_request::Ask::Properties(_)) = self.ask {
        } else {
            self.ask = ::std::option::Option::Some(property_request::Ask::Properties(GetPropertiesRequest::new()));
        }
        match self.ask {
            ::std::option::Option::Some(property_request::Ask::Properties(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_properties(&mut self) -> GetPropertiesRequest {
        if self.has_properties() {
            match self.ask.take() {
                ::std::option::Option::Some(property_request::Ask::Properties(v)) => v,
                _ => panic!(),
            }
        } else {
            GetPropertiesRequest::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GetPropertyRequest>(
            "property",
            PropertyRequest::has_property,
            PropertyRequest::property,
            PropertyRequest::mut_property,
            PropertyRequest::set_property,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GetPropertiesRequest>(
            "properties",
            PropertyRequest::has_properties,
            PropertyRequest::properties,
            PropertyRequest::mut_properties,
            PropertyRequest::set_properties,
        ));
        oneofs.push(property_request::Ask::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PropertyRequest>(
            "PropertyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PropertyRequest {
    const NAME: &'static str = "PropertyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ask = ::std::option::Option::Some(property_request::Ask::Property(is.read_message()?));
                },
                18 => {
                    self.ask = ::std::option::Option::Some(property_request::Ask::Properties(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ask {
            match v {
                &property_request::Ask::Property(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &property_request::Ask::Properties(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.ask {
            match v {
                &property_request::Ask::Property(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &property_request::Ask::Properties(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PropertyRequest {
        PropertyRequest::new()
    }

    fn clear(&mut self) {
        self.ask = ::std::option::Option::None;
        self.ask = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PropertyRequest {
        static instance: PropertyRequest = PropertyRequest {
            ask: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PropertyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PropertyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PropertyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PropertyRequest`
pub mod property_request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:lightspeed.request.PropertyRequest.ask)
    pub enum Ask {
        // @@protoc_insertion_point(oneof_field:lightspeed.request.PropertyRequest.property)
        Property(super::GetPropertyRequest),
        // @@protoc_insertion_point(oneof_field:lightspeed.request.PropertyRequest.properties)
        Properties(super::GetPropertiesRequest),
    }

    impl ::protobuf::Oneof for Ask {
    }

    impl ::protobuf::OneofFull for Ask {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PropertyRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("ask").unwrap()).clone()
        }
    }

    impl Ask {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Ask>("ask")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bprotocol/main/request.proto\x12\x12lightspeed.request\"7\n\x14GetP\
    ropertiesRequest\x12\x1f\n\x0bdevice_name\x18\x01\x20\x01(\tR\ndeviceNam\
    e\"Z\n\x12GetPropertyRequest\x12\x1f\n\x0bdevice_name\x18\x01\x20\x01(\t\
    R\ndeviceName\x12#\n\rproperty_name\x18\x02\x20\x01(\tR\x0cpropertyName\
    \"\x81\x01\n\x12SetPropertyRequest\x12\x1f\n\x0bdevice_name\x18\x01\x20\
    \x01(\tR\ndeviceName\x12#\n\rproperty_name\x18\x02\x20\x01(\tR\x0cproper\
    tyName\x12%\n\x0eproperty_value\x18\x03\x20\x01(\tR\rpropertyValue\"\xaa\
    \x01\n\x0fPropertyRequest\x12D\n\x08property\x18\x01\x20\x01(\x0b2&.ligh\
    tspeed.request.GetPropertyRequestH\0R\x08property\x12J\n\nproperties\x18\
    \x02\x20\x01(\x0b2(.lightspeed.request.GetPropertiesRequestH\0R\npropert\
    iesB\x05\n\x03askb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(GetPropertiesRequest::generated_message_descriptor_data());
            messages.push(GetPropertyRequest::generated_message_descriptor_data());
            messages.push(SetPropertyRequest::generated_message_descriptor_data());
            messages.push(PropertyRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
